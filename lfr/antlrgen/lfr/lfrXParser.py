# Generated from ./lfrX.g4 by ANTLR 4.10.1
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        75,
        593,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        2,
        61,
        7,
        61,
        2,
        62,
        7,
        62,
        2,
        63,
        7,
        63,
        2,
        64,
        7,
        64,
        1,
        0,
        4,
        0,
        132,
        8,
        0,
        11,
        0,
        12,
        0,
        133,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        146,
        8,
        2,
        1,
        2,
        1,
        2,
        1,
        3,
        1,
        3,
        4,
        3,
        152,
        8,
        3,
        11,
        3,
        12,
        3,
        153,
        1,
        4,
        1,
        4,
        1,
        4,
        5,
        4,
        159,
        8,
        4,
        10,
        4,
        12,
        4,
        162,
        9,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        5,
        4,
        167,
        8,
        4,
        10,
        4,
        12,
        4,
        170,
        9,
        4,
        3,
        4,
        172,
        8,
        4,
        1,
        5,
        1,
        5,
        3,
        5,
        176,
        8,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        5,
        6,
        182,
        8,
        6,
        10,
        6,
        12,
        6,
        185,
        9,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        5,
        6,
        191,
        8,
        6,
        10,
        6,
        12,
        6,
        194,
        9,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        5,
        6,
        200,
        8,
        6,
        10,
        6,
        12,
        6,
        203,
        9,
        6,
        3,
        6,
        205,
        8,
        6,
        1,
        7,
        3,
        7,
        208,
        8,
        7,
        1,
        7,
        1,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        9,
        4,
        9,
        221,
        8,
        9,
        11,
        9,
        12,
        9,
        222,
        1,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        228,
        8,
        10,
        1,
        11,
        1,
        11,
        5,
        11,
        232,
        8,
        11,
        10,
        11,
        12,
        11,
        235,
        9,
        11,
        1,
        11,
        3,
        11,
        238,
        8,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        4,
        16,
        262,
        8,
        16,
        11,
        16,
        12,
        16,
        263,
        1,
        16,
        1,
        16,
        1,
        16,
        3,
        16,
        269,
        8,
        16,
        1,
        17,
        1,
        17,
        4,
        17,
        273,
        8,
        17,
        11,
        17,
        12,
        17,
        274,
        1,
        17,
        3,
        17,
        278,
        8,
        17,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        21,
        1,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        302,
        8,
        22,
        1,
        22,
        1,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        5,
        23,
        309,
        8,
        23,
        10,
        23,
        12,
        23,
        312,
        9,
        23,
        1,
        24,
        1,
        24,
        3,
        24,
        316,
        8,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        322,
        8,
        25,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        3,
        26,
        329,
        8,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        28,
        1,
        28,
        3,
        28,
        339,
        8,
        28,
        1,
        29,
        1,
        29,
        1,
        29,
        5,
        29,
        344,
        8,
        29,
        10,
        29,
        12,
        29,
        347,
        9,
        29,
        1,
        30,
        1,
        30,
        1,
        30,
        5,
        30,
        352,
        8,
        30,
        10,
        30,
        12,
        30,
        355,
        9,
        30,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        32,
        1,
        32,
        1,
        33,
        1,
        33,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        3,
        34,
        372,
        8,
        34,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        5,
        35,
        378,
        8,
        35,
        10,
        35,
        12,
        35,
        381,
        9,
        35,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        5,
        36,
        387,
        8,
        36,
        10,
        36,
        12,
        36,
        390,
        9,
        36,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        5,
        37,
        396,
        8,
        37,
        10,
        37,
        12,
        37,
        399,
        9,
        37,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        5,
        38,
        405,
        8,
        38,
        10,
        38,
        12,
        38,
        408,
        9,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        5,
        39,
        414,
        8,
        39,
        10,
        39,
        12,
        39,
        417,
        9,
        39,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        1,
        40,
        3,
        40,
        424,
        8,
        40,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        3,
        41,
        430,
        8,
        41,
        1,
        42,
        3,
        42,
        433,
        8,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        3,
        43,
        441,
        8,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        3,
        43,
        446,
        8,
        43,
        5,
        43,
        448,
        8,
        43,
        10,
        43,
        12,
        43,
        451,
        9,
        43,
        1,
        44,
        3,
        44,
        454,
        8,
        44,
        1,
        44,
        1,
        44,
        3,
        44,
        458,
        8,
        44,
        1,
        45,
        1,
        45,
        3,
        45,
        462,
        8,
        45,
        1,
        45,
        1,
        45,
        1,
        45,
        3,
        45,
        467,
        8,
        45,
        5,
        45,
        469,
        8,
        45,
        10,
        45,
        12,
        45,
        472,
        9,
        45,
        1,
        46,
        1,
        46,
        1,
        46,
        1,
        46,
        1,
        47,
        1,
        47,
        1,
        48,
        1,
        48,
        1,
        48,
        1,
        48,
        3,
        48,
        484,
        8,
        48,
        1,
        48,
        1,
        48,
        1,
        49,
        1,
        49,
        3,
        49,
        490,
        8,
        49,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        5,
        50,
        496,
        8,
        50,
        10,
        50,
        12,
        50,
        499,
        9,
        50,
        1,
        50,
        1,
        50,
        3,
        50,
        503,
        8,
        50,
        1,
        51,
        1,
        51,
        1,
        52,
        1,
        52,
        1,
        53,
        1,
        53,
        1,
        53,
        3,
        53,
        512,
        8,
        53,
        1,
        54,
        1,
        54,
        1,
        54,
        4,
        54,
        517,
        8,
        54,
        11,
        54,
        12,
        54,
        518,
        1,
        54,
        1,
        54,
        1,
        54,
        1,
        54,
        3,
        54,
        525,
        8,
        54,
        1,
        54,
        1,
        54,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        55,
        1,
        56,
        1,
        56,
        3,
        56,
        535,
        8,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        57,
        1,
        57,
        5,
        57,
        544,
        8,
        57,
        10,
        57,
        12,
        57,
        547,
        9,
        57,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        3,
        58,
        553,
        8,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        3,
        58,
        559,
        8,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        3,
        58,
        565,
        8,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        3,
        58,
        571,
        8,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        1,
        58,
        3,
        58,
        577,
        8,
        58,
        3,
        58,
        579,
        8,
        58,
        1,
        59,
        1,
        59,
        1,
        60,
        1,
        60,
        1,
        61,
        1,
        61,
        1,
        62,
        1,
        62,
        1,
        63,
        1,
        63,
        1,
        64,
        1,
        64,
        1,
        64,
        0,
        0,
        65,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        122,
        124,
        126,
        128,
        0,
        7,
        2,
        0,
        23,
        24,
        26,
        26,
        1,
        0,
        36,
        37,
        1,
        0,
        41,
        51,
        5,
        0,
        19,
        19,
        38,
        42,
        45,
        45,
        47,
        47,
        49,
        65,
        1,
        0,
        43,
        51,
        5,
        0,
        45,
        45,
        47,
        47,
        49,
        51,
        55,
        56,
        59,
        60,
        1,
        0,
        71,
        75,
        601,
        0,
        131,
        1,
        0,
        0,
        0,
        2,
        135,
        1,
        0,
        0,
        0,
        4,
        139,
        1,
        0,
        0,
        0,
        6,
        151,
        1,
        0,
        0,
        0,
        8,
        171,
        1,
        0,
        0,
        0,
        10,
        173,
        1,
        0,
        0,
        0,
        12,
        204,
        1,
        0,
        0,
        0,
        14,
        207,
        1,
        0,
        0,
        0,
        16,
        211,
        1,
        0,
        0,
        0,
        18,
        220,
        1,
        0,
        0,
        0,
        20,
        227,
        1,
        0,
        0,
        0,
        22,
        229,
        1,
        0,
        0,
        0,
        24,
        239,
        1,
        0,
        0,
        0,
        26,
        245,
        1,
        0,
        0,
        0,
        28,
        248,
        1,
        0,
        0,
        0,
        30,
        255,
        1,
        0,
        0,
        0,
        32,
        268,
        1,
        0,
        0,
        0,
        34,
        270,
        1,
        0,
        0,
        0,
        36,
        281,
        1,
        0,
        0,
        0,
        38,
        286,
        1,
        0,
        0,
        0,
        40,
        290,
        1,
        0,
        0,
        0,
        42,
        294,
        1,
        0,
        0,
        0,
        44,
        296,
        1,
        0,
        0,
        0,
        46,
        305,
        1,
        0,
        0,
        0,
        48,
        313,
        1,
        0,
        0,
        0,
        50,
        321,
        1,
        0,
        0,
        0,
        52,
        328,
        1,
        0,
        0,
        0,
        54,
        330,
        1,
        0,
        0,
        0,
        56,
        338,
        1,
        0,
        0,
        0,
        58,
        340,
        1,
        0,
        0,
        0,
        60,
        348,
        1,
        0,
        0,
        0,
        62,
        356,
        1,
        0,
        0,
        0,
        64,
        362,
        1,
        0,
        0,
        0,
        66,
        364,
        1,
        0,
        0,
        0,
        68,
        371,
        1,
        0,
        0,
        0,
        70,
        373,
        1,
        0,
        0,
        0,
        72,
        382,
        1,
        0,
        0,
        0,
        74,
        391,
        1,
        0,
        0,
        0,
        76,
        400,
        1,
        0,
        0,
        0,
        78,
        409,
        1,
        0,
        0,
        0,
        80,
        418,
        1,
        0,
        0,
        0,
        82,
        425,
        1,
        0,
        0,
        0,
        84,
        432,
        1,
        0,
        0,
        0,
        86,
        440,
        1,
        0,
        0,
        0,
        88,
        457,
        1,
        0,
        0,
        0,
        90,
        461,
        1,
        0,
        0,
        0,
        92,
        473,
        1,
        0,
        0,
        0,
        94,
        477,
        1,
        0,
        0,
        0,
        96,
        479,
        1,
        0,
        0,
        0,
        98,
        489,
        1,
        0,
        0,
        0,
        100,
        491,
        1,
        0,
        0,
        0,
        102,
        504,
        1,
        0,
        0,
        0,
        104,
        506,
        1,
        0,
        0,
        0,
        106,
        511,
        1,
        0,
        0,
        0,
        108,
        513,
        1,
        0,
        0,
        0,
        110,
        528,
        1,
        0,
        0,
        0,
        112,
        534,
        1,
        0,
        0,
        0,
        114,
        536,
        1,
        0,
        0,
        0,
        116,
        578,
        1,
        0,
        0,
        0,
        118,
        580,
        1,
        0,
        0,
        0,
        120,
        582,
        1,
        0,
        0,
        0,
        122,
        584,
        1,
        0,
        0,
        0,
        124,
        586,
        1,
        0,
        0,
        0,
        126,
        588,
        1,
        0,
        0,
        0,
        128,
        590,
        1,
        0,
        0,
        0,
        130,
        132,
        3,
        2,
        1,
        0,
        131,
        130,
        1,
        0,
        0,
        0,
        132,
        133,
        1,
        0,
        0,
        0,
        133,
        131,
        1,
        0,
        0,
        0,
        133,
        134,
        1,
        0,
        0,
        0,
        134,
        1,
        1,
        0,
        0,
        0,
        135,
        136,
        3,
        4,
        2,
        0,
        136,
        137,
        3,
        6,
        3,
        0,
        137,
        138,
        5,
        1,
        0,
        0,
        138,
        3,
        1,
        0,
        0,
        0,
        139,
        140,
        5,
        2,
        0,
        0,
        140,
        145,
        5,
        66,
        0,
        0,
        141,
        142,
        5,
        3,
        0,
        0,
        142,
        143,
        3,
        8,
        4,
        0,
        143,
        144,
        5,
        4,
        0,
        0,
        144,
        146,
        1,
        0,
        0,
        0,
        145,
        141,
        1,
        0,
        0,
        0,
        145,
        146,
        1,
        0,
        0,
        0,
        146,
        147,
        1,
        0,
        0,
        0,
        147,
        148,
        5,
        5,
        0,
        0,
        148,
        5,
        1,
        0,
        0,
        0,
        149,
        152,
        3,
        50,
        25,
        0,
        150,
        152,
        3,
        16,
        8,
        0,
        151,
        149,
        1,
        0,
        0,
        0,
        151,
        150,
        1,
        0,
        0,
        0,
        152,
        153,
        1,
        0,
        0,
        0,
        153,
        151,
        1,
        0,
        0,
        0,
        153,
        154,
        1,
        0,
        0,
        0,
        154,
        7,
        1,
        0,
        0,
        0,
        155,
        160,
        3,
        10,
        5,
        0,
        156,
        157,
        5,
        6,
        0,
        0,
        157,
        159,
        3,
        10,
        5,
        0,
        158,
        156,
        1,
        0,
        0,
        0,
        159,
        162,
        1,
        0,
        0,
        0,
        160,
        158,
        1,
        0,
        0,
        0,
        160,
        161,
        1,
        0,
        0,
        0,
        161,
        172,
        1,
        0,
        0,
        0,
        162,
        160,
        1,
        0,
        0,
        0,
        163,
        168,
        3,
        12,
        6,
        0,
        164,
        165,
        5,
        6,
        0,
        0,
        165,
        167,
        3,
        12,
        6,
        0,
        166,
        164,
        1,
        0,
        0,
        0,
        167,
        170,
        1,
        0,
        0,
        0,
        168,
        166,
        1,
        0,
        0,
        0,
        168,
        169,
        1,
        0,
        0,
        0,
        169,
        172,
        1,
        0,
        0,
        0,
        170,
        168,
        1,
        0,
        0,
        0,
        171,
        155,
        1,
        0,
        0,
        0,
        171,
        163,
        1,
        0,
        0,
        0,
        172,
        9,
        1,
        0,
        0,
        0,
        173,
        175,
        5,
        66,
        0,
        0,
        174,
        176,
        3,
        96,
        48,
        0,
        175,
        174,
        1,
        0,
        0,
        0,
        175,
        176,
        1,
        0,
        0,
        0,
        176,
        11,
        1,
        0,
        0,
        0,
        177,
        178,
        5,
        7,
        0,
        0,
        178,
        183,
        3,
        14,
        7,
        0,
        179,
        180,
        5,
        6,
        0,
        0,
        180,
        182,
        3,
        14,
        7,
        0,
        181,
        179,
        1,
        0,
        0,
        0,
        182,
        185,
        1,
        0,
        0,
        0,
        183,
        181,
        1,
        0,
        0,
        0,
        183,
        184,
        1,
        0,
        0,
        0,
        184,
        205,
        1,
        0,
        0,
        0,
        185,
        183,
        1,
        0,
        0,
        0,
        186,
        187,
        5,
        8,
        0,
        0,
        187,
        192,
        3,
        14,
        7,
        0,
        188,
        189,
        5,
        6,
        0,
        0,
        189,
        191,
        3,
        14,
        7,
        0,
        190,
        188,
        1,
        0,
        0,
        0,
        191,
        194,
        1,
        0,
        0,
        0,
        192,
        190,
        1,
        0,
        0,
        0,
        192,
        193,
        1,
        0,
        0,
        0,
        193,
        205,
        1,
        0,
        0,
        0,
        194,
        192,
        1,
        0,
        0,
        0,
        195,
        196,
        5,
        9,
        0,
        0,
        196,
        201,
        3,
        14,
        7,
        0,
        197,
        198,
        5,
        6,
        0,
        0,
        198,
        200,
        3,
        14,
        7,
        0,
        199,
        197,
        1,
        0,
        0,
        0,
        200,
        203,
        1,
        0,
        0,
        0,
        201,
        199,
        1,
        0,
        0,
        0,
        201,
        202,
        1,
        0,
        0,
        0,
        202,
        205,
        1,
        0,
        0,
        0,
        203,
        201,
        1,
        0,
        0,
        0,
        204,
        177,
        1,
        0,
        0,
        0,
        204,
        186,
        1,
        0,
        0,
        0,
        204,
        195,
        1,
        0,
        0,
        0,
        205,
        13,
        1,
        0,
        0,
        0,
        206,
        208,
        3,
        96,
        48,
        0,
        207,
        206,
        1,
        0,
        0,
        0,
        207,
        208,
        1,
        0,
        0,
        0,
        208,
        209,
        1,
        0,
        0,
        0,
        209,
        210,
        5,
        66,
        0,
        0,
        210,
        15,
        1,
        0,
        0,
        0,
        211,
        212,
        5,
        10,
        0,
        0,
        212,
        213,
        5,
        3,
        0,
        0,
        213,
        214,
        3,
        46,
        23,
        0,
        214,
        215,
        5,
        4,
        0,
        0,
        215,
        216,
        5,
        11,
        0,
        0,
        216,
        217,
        3,
        18,
        9,
        0,
        217,
        218,
        5,
        12,
        0,
        0,
        218,
        17,
        1,
        0,
        0,
        0,
        219,
        221,
        3,
        20,
        10,
        0,
        220,
        219,
        1,
        0,
        0,
        0,
        221,
        222,
        1,
        0,
        0,
        0,
        222,
        220,
        1,
        0,
        0,
        0,
        222,
        223,
        1,
        0,
        0,
        0,
        223,
        19,
        1,
        0,
        0,
        0,
        224,
        228,
        3,
        44,
        22,
        0,
        225,
        228,
        3,
        34,
        17,
        0,
        226,
        228,
        3,
        22,
        11,
        0,
        227,
        224,
        1,
        0,
        0,
        0,
        227,
        225,
        1,
        0,
        0,
        0,
        227,
        226,
        1,
        0,
        0,
        0,
        228,
        21,
        1,
        0,
        0,
        0,
        229,
        233,
        3,
        24,
        12,
        0,
        230,
        232,
        3,
        28,
        14,
        0,
        231,
        230,
        1,
        0,
        0,
        0,
        232,
        235,
        1,
        0,
        0,
        0,
        233,
        231,
        1,
        0,
        0,
        0,
        233,
        234,
        1,
        0,
        0,
        0,
        234,
        237,
        1,
        0,
        0,
        0,
        235,
        233,
        1,
        0,
        0,
        0,
        236,
        238,
        3,
        26,
        13,
        0,
        237,
        236,
        1,
        0,
        0,
        0,
        237,
        238,
        1,
        0,
        0,
        0,
        238,
        23,
        1,
        0,
        0,
        0,
        239,
        240,
        5,
        13,
        0,
        0,
        240,
        241,
        5,
        3,
        0,
        0,
        241,
        242,
        3,
        30,
        15,
        0,
        242,
        243,
        5,
        4,
        0,
        0,
        243,
        244,
        3,
        32,
        16,
        0,
        244,
        25,
        1,
        0,
        0,
        0,
        245,
        246,
        5,
        14,
        0,
        0,
        246,
        247,
        3,
        32,
        16,
        0,
        247,
        27,
        1,
        0,
        0,
        0,
        248,
        249,
        5,
        14,
        0,
        0,
        249,
        250,
        5,
        13,
        0,
        0,
        250,
        251,
        5,
        3,
        0,
        0,
        251,
        252,
        3,
        30,
        15,
        0,
        252,
        253,
        5,
        4,
        0,
        0,
        253,
        254,
        3,
        32,
        16,
        0,
        254,
        29,
        1,
        0,
        0,
        0,
        255,
        256,
        3,
        102,
        51,
        0,
        256,
        257,
        3,
        126,
        63,
        0,
        257,
        258,
        3,
        42,
        21,
        0,
        258,
        31,
        1,
        0,
        0,
        0,
        259,
        261,
        5,
        11,
        0,
        0,
        260,
        262,
        3,
        44,
        22,
        0,
        261,
        260,
        1,
        0,
        0,
        0,
        262,
        263,
        1,
        0,
        0,
        0,
        263,
        261,
        1,
        0,
        0,
        0,
        263,
        264,
        1,
        0,
        0,
        0,
        264,
        265,
        1,
        0,
        0,
        0,
        265,
        266,
        5,
        12,
        0,
        0,
        266,
        269,
        1,
        0,
        0,
        0,
        267,
        269,
        3,
        44,
        22,
        0,
        268,
        259,
        1,
        0,
        0,
        0,
        268,
        267,
        1,
        0,
        0,
        0,
        269,
        33,
        1,
        0,
        0,
        0,
        270,
        272,
        3,
        36,
        18,
        0,
        271,
        273,
        3,
        38,
        19,
        0,
        272,
        271,
        1,
        0,
        0,
        0,
        273,
        274,
        1,
        0,
        0,
        0,
        274,
        272,
        1,
        0,
        0,
        0,
        274,
        275,
        1,
        0,
        0,
        0,
        275,
        277,
        1,
        0,
        0,
        0,
        276,
        278,
        3,
        40,
        20,
        0,
        277,
        276,
        1,
        0,
        0,
        0,
        277,
        278,
        1,
        0,
        0,
        0,
        278,
        279,
        1,
        0,
        0,
        0,
        279,
        280,
        5,
        15,
        0,
        0,
        280,
        35,
        1,
        0,
        0,
        0,
        281,
        282,
        5,
        16,
        0,
        0,
        282,
        283,
        5,
        3,
        0,
        0,
        283,
        284,
        3,
        102,
        51,
        0,
        284,
        285,
        5,
        4,
        0,
        0,
        285,
        37,
        1,
        0,
        0,
        0,
        286,
        287,
        3,
        42,
        21,
        0,
        287,
        288,
        5,
        17,
        0,
        0,
        288,
        289,
        3,
        32,
        16,
        0,
        289,
        39,
        1,
        0,
        0,
        0,
        290,
        291,
        5,
        18,
        0,
        0,
        291,
        292,
        5,
        17,
        0,
        0,
        292,
        293,
        3,
        32,
        16,
        0,
        293,
        41,
        1,
        0,
        0,
        0,
        294,
        295,
        3,
        128,
        64,
        0,
        295,
        43,
        1,
        0,
        0,
        0,
        296,
        297,
        3,
        102,
        51,
        0,
        297,
        301,
        5,
        19,
        0,
        0,
        298,
        302,
        3,
        128,
        64,
        0,
        299,
        302,
        3,
        98,
        49,
        0,
        300,
        302,
        3,
        86,
        43,
        0,
        301,
        298,
        1,
        0,
        0,
        0,
        301,
        299,
        1,
        0,
        0,
        0,
        301,
        300,
        1,
        0,
        0,
        0,
        302,
        303,
        1,
        0,
        0,
        0,
        303,
        304,
        5,
        5,
        0,
        0,
        304,
        45,
        1,
        0,
        0,
        0,
        305,
        310,
        3,
        48,
        24,
        0,
        306,
        307,
        5,
        6,
        0,
        0,
        307,
        309,
        3,
        48,
        24,
        0,
        308,
        306,
        1,
        0,
        0,
        0,
        309,
        312,
        1,
        0,
        0,
        0,
        310,
        308,
        1,
        0,
        0,
        0,
        310,
        311,
        1,
        0,
        0,
        0,
        311,
        47,
        1,
        0,
        0,
        0,
        312,
        310,
        1,
        0,
        0,
        0,
        313,
        315,
        5,
        66,
        0,
        0,
        314,
        316,
        3,
        96,
        48,
        0,
        315,
        314,
        1,
        0,
        0,
        0,
        315,
        316,
        1,
        0,
        0,
        0,
        316,
        49,
        1,
        0,
        0,
        0,
        317,
        318,
        3,
        52,
        26,
        0,
        318,
        319,
        5,
        5,
        0,
        0,
        319,
        322,
        1,
        0,
        0,
        0,
        320,
        322,
        3,
        106,
        53,
        0,
        321,
        317,
        1,
        0,
        0,
        0,
        321,
        320,
        1,
        0,
        0,
        0,
        322,
        51,
        1,
        0,
        0,
        0,
        323,
        329,
        3,
        104,
        52,
        0,
        324,
        329,
        3,
        80,
        40,
        0,
        325,
        329,
        3,
        68,
        34,
        0,
        326,
        329,
        3,
        82,
        41,
        0,
        327,
        329,
        3,
        54,
        27,
        0,
        328,
        323,
        1,
        0,
        0,
        0,
        328,
        324,
        1,
        0,
        0,
        0,
        328,
        325,
        1,
        0,
        0,
        0,
        328,
        326,
        1,
        0,
        0,
        0,
        328,
        327,
        1,
        0,
        0,
        0,
        329,
        53,
        1,
        0,
        0,
        0,
        330,
        331,
        3,
        66,
        33,
        0,
        331,
        332,
        3,
        64,
        32,
        0,
        332,
        333,
        5,
        3,
        0,
        0,
        333,
        334,
        3,
        56,
        28,
        0,
        334,
        335,
        5,
        4,
        0,
        0,
        335,
        55,
        1,
        0,
        0,
        0,
        336,
        339,
        3,
        58,
        29,
        0,
        337,
        339,
        3,
        60,
        30,
        0,
        338,
        336,
        1,
        0,
        0,
        0,
        338,
        337,
        1,
        0,
        0,
        0,
        339,
        57,
        1,
        0,
        0,
        0,
        340,
        345,
        3,
        10,
        5,
        0,
        341,
        342,
        5,
        6,
        0,
        0,
        342,
        344,
        3,
        10,
        5,
        0,
        343,
        341,
        1,
        0,
        0,
        0,
        344,
        347,
        1,
        0,
        0,
        0,
        345,
        343,
        1,
        0,
        0,
        0,
        345,
        346,
        1,
        0,
        0,
        0,
        346,
        59,
        1,
        0,
        0,
        0,
        347,
        345,
        1,
        0,
        0,
        0,
        348,
        353,
        3,
        62,
        31,
        0,
        349,
        350,
        5,
        6,
        0,
        0,
        350,
        352,
        3,
        62,
        31,
        0,
        351,
        349,
        1,
        0,
        0,
        0,
        352,
        355,
        1,
        0,
        0,
        0,
        353,
        351,
        1,
        0,
        0,
        0,
        353,
        354,
        1,
        0,
        0,
        0,
        354,
        61,
        1,
        0,
        0,
        0,
        355,
        353,
        1,
        0,
        0,
        0,
        356,
        357,
        5,
        20,
        0,
        0,
        357,
        358,
        5,
        66,
        0,
        0,
        358,
        359,
        5,
        3,
        0,
        0,
        359,
        360,
        3,
        98,
        49,
        0,
        360,
        361,
        5,
        4,
        0,
        0,
        361,
        63,
        1,
        0,
        0,
        0,
        362,
        363,
        5,
        66,
        0,
        0,
        363,
        65,
        1,
        0,
        0,
        0,
        364,
        365,
        5,
        66,
        0,
        0,
        365,
        67,
        1,
        0,
        0,
        0,
        366,
        372,
        3,
        72,
        36,
        0,
        367,
        372,
        3,
        74,
        37,
        0,
        368,
        372,
        3,
        78,
        39,
        0,
        369,
        372,
        3,
        70,
        35,
        0,
        370,
        372,
        3,
        76,
        38,
        0,
        371,
        366,
        1,
        0,
        0,
        0,
        371,
        367,
        1,
        0,
        0,
        0,
        371,
        368,
        1,
        0,
        0,
        0,
        371,
        369,
        1,
        0,
        0,
        0,
        371,
        370,
        1,
        0,
        0,
        0,
        372,
        69,
        1,
        0,
        0,
        0,
        373,
        374,
        5,
        21,
        0,
        0,
        374,
        379,
        3,
        14,
        7,
        0,
        375,
        376,
        5,
        6,
        0,
        0,
        376,
        378,
        3,
        14,
        7,
        0,
        377,
        375,
        1,
        0,
        0,
        0,
        378,
        381,
        1,
        0,
        0,
        0,
        379,
        377,
        1,
        0,
        0,
        0,
        379,
        380,
        1,
        0,
        0,
        0,
        380,
        71,
        1,
        0,
        0,
        0,
        381,
        379,
        1,
        0,
        0,
        0,
        382,
        383,
        5,
        22,
        0,
        0,
        383,
        388,
        3,
        14,
        7,
        0,
        384,
        385,
        5,
        6,
        0,
        0,
        385,
        387,
        3,
        14,
        7,
        0,
        386,
        384,
        1,
        0,
        0,
        0,
        387,
        390,
        1,
        0,
        0,
        0,
        388,
        386,
        1,
        0,
        0,
        0,
        388,
        389,
        1,
        0,
        0,
        0,
        389,
        73,
        1,
        0,
        0,
        0,
        390,
        388,
        1,
        0,
        0,
        0,
        391,
        392,
        5,
        23,
        0,
        0,
        392,
        397,
        3,
        14,
        7,
        0,
        393,
        394,
        5,
        6,
        0,
        0,
        394,
        396,
        3,
        14,
        7,
        0,
        395,
        393,
        1,
        0,
        0,
        0,
        396,
        399,
        1,
        0,
        0,
        0,
        397,
        395,
        1,
        0,
        0,
        0,
        397,
        398,
        1,
        0,
        0,
        0,
        398,
        75,
        1,
        0,
        0,
        0,
        399,
        397,
        1,
        0,
        0,
        0,
        400,
        401,
        5,
        24,
        0,
        0,
        401,
        406,
        3,
        14,
        7,
        0,
        402,
        403,
        5,
        6,
        0,
        0,
        403,
        405,
        3,
        14,
        7,
        0,
        404,
        402,
        1,
        0,
        0,
        0,
        405,
        408,
        1,
        0,
        0,
        0,
        406,
        404,
        1,
        0,
        0,
        0,
        406,
        407,
        1,
        0,
        0,
        0,
        407,
        77,
        1,
        0,
        0,
        0,
        408,
        406,
        1,
        0,
        0,
        0,
        409,
        410,
        5,
        25,
        0,
        0,
        410,
        415,
        3,
        82,
        41,
        0,
        411,
        412,
        5,
        6,
        0,
        0,
        412,
        414,
        3,
        82,
        41,
        0,
        413,
        411,
        1,
        0,
        0,
        0,
        414,
        417,
        1,
        0,
        0,
        0,
        415,
        413,
        1,
        0,
        0,
        0,
        415,
        416,
        1,
        0,
        0,
        0,
        416,
        79,
        1,
        0,
        0,
        0,
        417,
        415,
        1,
        0,
        0,
        0,
        418,
        419,
        5,
        26,
        0,
        0,
        419,
        420,
        3,
        102,
        51,
        0,
        420,
        423,
        5,
        27,
        0,
        0,
        421,
        424,
        3,
        84,
        42,
        0,
        422,
        424,
        3,
        86,
        43,
        0,
        423,
        421,
        1,
        0,
        0,
        0,
        423,
        422,
        1,
        0,
        0,
        0,
        424,
        81,
        1,
        0,
        0,
        0,
        425,
        426,
        5,
        66,
        0,
        0,
        426,
        429,
        5,
        27,
        0,
        0,
        427,
        430,
        3,
        84,
        42,
        0,
        428,
        430,
        3,
        86,
        43,
        0,
        429,
        427,
        1,
        0,
        0,
        0,
        429,
        428,
        1,
        0,
        0,
        0,
        430,
        83,
        1,
        0,
        0,
        0,
        431,
        433,
        3,
        120,
        60,
        0,
        432,
        431,
        1,
        0,
        0,
        0,
        432,
        433,
        1,
        0,
        0,
        0,
        433,
        434,
        1,
        0,
        0,
        0,
        434,
        435,
        5,
        3,
        0,
        0,
        435,
        436,
        3,
        86,
        43,
        0,
        436,
        437,
        5,
        4,
        0,
        0,
        437,
        85,
        1,
        0,
        0,
        0,
        438,
        441,
        3,
        84,
        42,
        0,
        439,
        441,
        3,
        88,
        44,
        0,
        440,
        438,
        1,
        0,
        0,
        0,
        440,
        439,
        1,
        0,
        0,
        0,
        441,
        449,
        1,
        0,
        0,
        0,
        442,
        445,
        3,
        122,
        61,
        0,
        443,
        446,
        3,
        84,
        42,
        0,
        444,
        446,
        3,
        88,
        44,
        0,
        445,
        443,
        1,
        0,
        0,
        0,
        445,
        444,
        1,
        0,
        0,
        0,
        446,
        448,
        1,
        0,
        0,
        0,
        447,
        442,
        1,
        0,
        0,
        0,
        448,
        451,
        1,
        0,
        0,
        0,
        449,
        447,
        1,
        0,
        0,
        0,
        449,
        450,
        1,
        0,
        0,
        0,
        450,
        87,
        1,
        0,
        0,
        0,
        451,
        449,
        1,
        0,
        0,
        0,
        452,
        454,
        3,
        120,
        60,
        0,
        453,
        452,
        1,
        0,
        0,
        0,
        453,
        454,
        1,
        0,
        0,
        0,
        454,
        455,
        1,
        0,
        0,
        0,
        455,
        458,
        3,
        98,
        49,
        0,
        456,
        458,
        3,
        128,
        64,
        0,
        457,
        453,
        1,
        0,
        0,
        0,
        457,
        456,
        1,
        0,
        0,
        0,
        458,
        89,
        1,
        0,
        0,
        0,
        459,
        462,
        3,
        84,
        42,
        0,
        460,
        462,
        3,
        88,
        44,
        0,
        461,
        459,
        1,
        0,
        0,
        0,
        461,
        460,
        1,
        0,
        0,
        0,
        462,
        470,
        1,
        0,
        0,
        0,
        463,
        466,
        3,
        122,
        61,
        0,
        464,
        467,
        3,
        84,
        42,
        0,
        465,
        467,
        3,
        88,
        44,
        0,
        466,
        464,
        1,
        0,
        0,
        0,
        466,
        465,
        1,
        0,
        0,
        0,
        467,
        469,
        1,
        0,
        0,
        0,
        468,
        463,
        1,
        0,
        0,
        0,
        469,
        472,
        1,
        0,
        0,
        0,
        470,
        468,
        1,
        0,
        0,
        0,
        470,
        471,
        1,
        0,
        0,
        0,
        471,
        91,
        1,
        0,
        0,
        0,
        472,
        470,
        1,
        0,
        0,
        0,
        473,
        474,
        3,
        90,
        45,
        0,
        474,
        475,
        3,
        126,
        63,
        0,
        475,
        476,
        3,
        94,
        47,
        0,
        476,
        93,
        1,
        0,
        0,
        0,
        477,
        478,
        3,
        128,
        64,
        0,
        478,
        95,
        1,
        0,
        0,
        0,
        479,
        480,
        5,
        28,
        0,
        0,
        480,
        483,
        5,
        72,
        0,
        0,
        481,
        482,
        5,
        17,
        0,
        0,
        482,
        484,
        5,
        72,
        0,
        0,
        483,
        481,
        1,
        0,
        0,
        0,
        483,
        484,
        1,
        0,
        0,
        0,
        484,
        485,
        1,
        0,
        0,
        0,
        485,
        486,
        5,
        29,
        0,
        0,
        486,
        97,
        1,
        0,
        0,
        0,
        487,
        490,
        3,
        10,
        5,
        0,
        488,
        490,
        3,
        100,
        50,
        0,
        489,
        487,
        1,
        0,
        0,
        0,
        489,
        488,
        1,
        0,
        0,
        0,
        490,
        99,
        1,
        0,
        0,
        0,
        491,
        492,
        5,
        30,
        0,
        0,
        492,
        497,
        3,
        10,
        5,
        0,
        493,
        494,
        5,
        6,
        0,
        0,
        494,
        496,
        3,
        10,
        5,
        0,
        495,
        493,
        1,
        0,
        0,
        0,
        496,
        499,
        1,
        0,
        0,
        0,
        497,
        495,
        1,
        0,
        0,
        0,
        497,
        498,
        1,
        0,
        0,
        0,
        498,
        500,
        1,
        0,
        0,
        0,
        499,
        497,
        1,
        0,
        0,
        0,
        500,
        502,
        5,
        31,
        0,
        0,
        501,
        503,
        3,
        96,
        48,
        0,
        502,
        501,
        1,
        0,
        0,
        0,
        502,
        503,
        1,
        0,
        0,
        0,
        503,
        101,
        1,
        0,
        0,
        0,
        504,
        505,
        3,
        98,
        49,
        0,
        505,
        103,
        1,
        0,
        0,
        0,
        506,
        507,
        3,
        12,
        6,
        0,
        507,
        105,
        1,
        0,
        0,
        0,
        508,
        512,
        3,
        114,
        57,
        0,
        509,
        512,
        3,
        108,
        54,
        0,
        510,
        512,
        3,
        110,
        55,
        0,
        511,
        508,
        1,
        0,
        0,
        0,
        511,
        509,
        1,
        0,
        0,
        0,
        511,
        510,
        1,
        0,
        0,
        0,
        512,
        107,
        1,
        0,
        0,
        0,
        513,
        514,
        5,
        32,
        0,
        0,
        514,
        516,
        5,
        33,
        0,
        0,
        515,
        517,
        5,
        66,
        0,
        0,
        516,
        515,
        1,
        0,
        0,
        0,
        517,
        518,
        1,
        0,
        0,
        0,
        518,
        516,
        1,
        0,
        0,
        0,
        518,
        519,
        1,
        0,
        0,
        0,
        519,
        520,
        1,
        0,
        0,
        0,
        520,
        521,
        5,
        33,
        0,
        0,
        521,
        524,
        5,
        33,
        0,
        0,
        522,
        525,
        3,
        112,
        56,
        0,
        523,
        525,
        7,
        0,
        0,
        0,
        524,
        522,
        1,
        0,
        0,
        0,
        524,
        523,
        1,
        0,
        0,
        0,
        525,
        526,
        1,
        0,
        0,
        0,
        526,
        527,
        5,
        33,
        0,
        0,
        527,
        109,
        1,
        0,
        0,
        0,
        528,
        529,
        5,
        34,
        0,
        0,
        529,
        530,
        5,
        66,
        0,
        0,
        530,
        531,
        5,
        66,
        0,
        0,
        531,
        111,
        1,
        0,
        0,
        0,
        532,
        535,
        3,
        122,
        61,
        0,
        533,
        535,
        3,
        120,
        60,
        0,
        534,
        532,
        1,
        0,
        0,
        0,
        534,
        533,
        1,
        0,
        0,
        0,
        535,
        113,
        1,
        0,
        0,
        0,
        536,
        537,
        5,
        35,
        0,
        0,
        537,
        538,
        5,
        33,
        0,
        0,
        538,
        539,
        3,
        112,
        56,
        0,
        539,
        540,
        5,
        33,
        0,
        0,
        540,
        545,
        3,
        116,
        58,
        0,
        541,
        542,
        7,
        1,
        0,
        0,
        542,
        544,
        3,
        116,
        58,
        0,
        543,
        541,
        1,
        0,
        0,
        0,
        544,
        547,
        1,
        0,
        0,
        0,
        545,
        543,
        1,
        0,
        0,
        0,
        545,
        546,
        1,
        0,
        0,
        0,
        546,
        115,
        1,
        0,
        0,
        0,
        547,
        545,
        1,
        0,
        0,
        0,
        548,
        549,
        5,
        66,
        0,
        0,
        549,
        550,
        5,
        27,
        0,
        0,
        550,
        552,
        3,
        128,
        64,
        0,
        551,
        553,
        3,
        118,
        59,
        0,
        552,
        551,
        1,
        0,
        0,
        0,
        552,
        553,
        1,
        0,
        0,
        0,
        553,
        579,
        1,
        0,
        0,
        0,
        554,
        555,
        5,
        66,
        0,
        0,
        555,
        556,
        5,
        38,
        0,
        0,
        556,
        558,
        3,
        128,
        64,
        0,
        557,
        559,
        3,
        118,
        59,
        0,
        558,
        557,
        1,
        0,
        0,
        0,
        558,
        559,
        1,
        0,
        0,
        0,
        559,
        579,
        1,
        0,
        0,
        0,
        560,
        561,
        5,
        66,
        0,
        0,
        561,
        562,
        5,
        39,
        0,
        0,
        562,
        564,
        3,
        128,
        64,
        0,
        563,
        565,
        3,
        118,
        59,
        0,
        564,
        563,
        1,
        0,
        0,
        0,
        564,
        565,
        1,
        0,
        0,
        0,
        565,
        579,
        1,
        0,
        0,
        0,
        566,
        567,
        5,
        66,
        0,
        0,
        567,
        568,
        5,
        40,
        0,
        0,
        568,
        570,
        3,
        128,
        64,
        0,
        569,
        571,
        3,
        118,
        59,
        0,
        570,
        569,
        1,
        0,
        0,
        0,
        570,
        571,
        1,
        0,
        0,
        0,
        571,
        579,
        1,
        0,
        0,
        0,
        572,
        573,
        5,
        66,
        0,
        0,
        573,
        574,
        5,
        19,
        0,
        0,
        574,
        576,
        3,
        128,
        64,
        0,
        575,
        577,
        3,
        118,
        59,
        0,
        576,
        575,
        1,
        0,
        0,
        0,
        576,
        577,
        1,
        0,
        0,
        0,
        577,
        579,
        1,
        0,
        0,
        0,
        578,
        548,
        1,
        0,
        0,
        0,
        578,
        554,
        1,
        0,
        0,
        0,
        578,
        560,
        1,
        0,
        0,
        0,
        578,
        566,
        1,
        0,
        0,
        0,
        578,
        572,
        1,
        0,
        0,
        0,
        579,
        117,
        1,
        0,
        0,
        0,
        580,
        581,
        5,
        66,
        0,
        0,
        581,
        119,
        1,
        0,
        0,
        0,
        582,
        583,
        7,
        2,
        0,
        0,
        583,
        121,
        1,
        0,
        0,
        0,
        584,
        585,
        7,
        3,
        0,
        0,
        585,
        123,
        1,
        0,
        0,
        0,
        586,
        587,
        7,
        4,
        0,
        0,
        587,
        125,
        1,
        0,
        0,
        0,
        588,
        589,
        7,
        5,
        0,
        0,
        589,
        127,
        1,
        0,
        0,
        0,
        590,
        591,
        7,
        6,
        0,
        0,
        591,
        129,
        1,
        0,
        0,
        0,
        61,
        133,
        145,
        151,
        153,
        160,
        168,
        171,
        175,
        183,
        192,
        201,
        204,
        207,
        222,
        227,
        233,
        237,
        263,
        268,
        274,
        277,
        301,
        310,
        315,
        321,
        328,
        338,
        345,
        353,
        371,
        379,
        388,
        397,
        406,
        415,
        423,
        429,
        432,
        440,
        445,
        449,
        453,
        457,
        461,
        466,
        470,
        483,
        489,
        497,
        502,
        511,
        518,
        524,
        534,
        545,
        552,
        558,
        564,
        570,
        576,
        578,
    ]


class lfrXParser(Parser):

    grammarFileName = "lfrX.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'endmodule'",
        "'module'",
        "'('",
        "')'",
        "';'",
        "','",
        "'finput'",
        "'foutput'",
        "'control'",
        "'distribute@'",
        "'begin'",
        "'end'",
        "'if'",
        "'else'",
        "'endcase'",
        "'case'",
        "':'",
        "'default'",
        "'<='",
        "'.'",
        "'signal'",
        "'flow'",
        "'storage'",
        "'pump'",
        "'number'",
        "'assign'",
        "'='",
        "'['",
        "']'",
        "'{'",
        "'}'",
        "'#MAP'",
        "'\"'",
        "'#MATERIAL'",
        "'#CONSTRAIN'",
        "'AND'",
        "'OR'",
        "'>'",
        "'<'",
        "'>='",
        "'+'",
        "'-'",
        "'!'",
        "'~'",
        "'&'",
        "'~&'",
        "'|'",
        "'~|'",
        "'^'",
        "'~^'",
        "'^~'",
        "'*'",
        "'/'",
        "'%'",
        "'=='",
        "'!='",
        "'==='",
        "'!=='",
        "'&&'",
        "'||'",
        "'**'",
        "'>>'",
        "'<<'",
        "'>>>'",
        "'<<<'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "ID",
        "WS",
        "One_line_comment",
        "Block_comment",
        "Import_line",
        "Real_number",
        "Decimal_number",
        "Binary_number",
        "Octal_number",
        "Hex_number",
    ]

    RULE_skeleton = 0
    RULE_module = 1
    RULE_moduledefinition = 2
    RULE_body = 3
    RULE_ioblock = 4
    RULE_vectorvar = 5
    RULE_explicitIOBlock = 6
    RULE_declvar = 7
    RULE_distributionBlock = 8
    RULE_distributionBody = 9
    RULE_distributeBodyStat = 10
    RULE_ifElseBlock = 11
    RULE_ifBlock = 12
    RULE_elseBlock = 13
    RULE_elseIfBlock = 14
    RULE_distributeCondition = 15
    RULE_statementBlock = 16
    RULE_caseBlock = 17
    RULE_caseBlockHeader = 18
    RULE_casestat = 19
    RULE_defaultCaseStat = 20
    RULE_distvalue = 21
    RULE_distributionassignstat = 22
    RULE_sensitivitylist = 23
    RULE_signal = 24
    RULE_statements = 25
    RULE_statement = 26
    RULE_moduleinstantiationstat = 27
    RULE_instanceioblock = 28
    RULE_orderedioblock = 29
    RULE_unorderedioblock = 30
    RULE_explicitinstanceiomapping = 31
    RULE_instancename = 32
    RULE_moduletype = 33
    RULE_tempvariablesstat = 34
    RULE_signalvarstat = 35
    RULE_fluiddeclstat = 36
    RULE_storagestat = 37
    RULE_pumpvarstat = 38
    RULE_numvarstat = 39
    RULE_assignstat = 40
    RULE_literalassignstat = 41
    RULE_bracketexpression = 42
    RULE_expression = 43
    RULE_expressionterm = 44
    RULE_logiccondition_operand = 45
    RULE_logiccondition = 46
    RULE_logic_value = 47
    RULE_vector = 48
    RULE_variables = 49
    RULE_concatenation = 50
    RULE_lhs = 51
    RULE_ioassignstat = 52
    RULE_technologydirectives = 53
    RULE_technologymappingdirective = 54
    RULE_materialmappingdirective = 55
    RULE_mappingoperator = 56
    RULE_performancedirective = 57
    RULE_constraint = 58
    RULE_unit = 59
    RULE_unary_operator = 60
    RULE_binary_operator = 61
    RULE_unary_module_path_operator = 62
    RULE_binary_module_path_operator = 63
    RULE_number = 64

    ruleNames = [
        "skeleton",
        "module",
        "moduledefinition",
        "body",
        "ioblock",
        "vectorvar",
        "explicitIOBlock",
        "declvar",
        "distributionBlock",
        "distributionBody",
        "distributeBodyStat",
        "ifElseBlock",
        "ifBlock",
        "elseBlock",
        "elseIfBlock",
        "distributeCondition",
        "statementBlock",
        "caseBlock",
        "caseBlockHeader",
        "casestat",
        "defaultCaseStat",
        "distvalue",
        "distributionassignstat",
        "sensitivitylist",
        "signal",
        "statements",
        "statement",
        "moduleinstantiationstat",
        "instanceioblock",
        "orderedioblock",
        "unorderedioblock",
        "explicitinstanceiomapping",
        "instancename",
        "moduletype",
        "tempvariablesstat",
        "signalvarstat",
        "fluiddeclstat",
        "storagestat",
        "pumpvarstat",
        "numvarstat",
        "assignstat",
        "literalassignstat",
        "bracketexpression",
        "expression",
        "expressionterm",
        "logiccondition_operand",
        "logiccondition",
        "logic_value",
        "vector",
        "variables",
        "concatenation",
        "lhs",
        "ioassignstat",
        "technologydirectives",
        "technologymappingdirective",
        "materialmappingdirective",
        "mappingoperator",
        "performancedirective",
        "constraint",
        "unit",
        "unary_operator",
        "binary_operator",
        "unary_module_path_operator",
        "binary_module_path_operator",
        "number",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    T__55 = 56
    T__56 = 57
    T__57 = 58
    T__58 = 59
    T__59 = 60
    T__60 = 61
    T__61 = 62
    T__62 = 63
    T__63 = 64
    T__64 = 65
    ID = 66
    WS = 67
    One_line_comment = 68
    Block_comment = 69
    Import_line = 70
    Real_number = 71
    Decimal_number = 72
    Binary_number = 73
    Octal_number = 74
    Hex_number = 75

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class SkeletonContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.ModuleContext)
            else:
                return self.getTypedRuleContext(lfrXParser.ModuleContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_skeleton

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSkeleton"):
                listener.enterSkeleton(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSkeleton"):
                listener.exitSkeleton(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSkeleton"):
                return visitor.visitSkeleton(self)
            else:
                return visitor.visitChildren(self)

    def skeleton(self):

        localctx = lfrXParser.SkeletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_skeleton)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 130
                self.module()
                self.state = 133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == lfrXParser.T__1):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduledefinition(self):
            return self.getTypedRuleContext(lfrXParser.ModuledefinitionContext, 0)

        def body(self):
            return self.getTypedRuleContext(lfrXParser.BodyContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_module

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModule"):
                listener.enterModule(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModule"):
                listener.exitModule(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModule"):
                return visitor.visitModule(self)
            else:
                return visitor.visitChildren(self)

    def module(self):

        localctx = lfrXParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 135
            self.moduledefinition()
            self.state = 136
            self.body()
            self.state = 137
            self.match(lfrXParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuledefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(lfrXParser.ID, 0)

        def ioblock(self):
            return self.getTypedRuleContext(lfrXParser.IoblockContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_moduledefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModuledefinition"):
                listener.enterModuledefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModuledefinition"):
                listener.exitModuledefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModuledefinition"):
                return visitor.visitModuledefinition(self)
            else:
                return visitor.visitChildren(self)

    def moduledefinition(self):

        localctx = lfrXParser.ModuledefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_moduledefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 139
            self.match(lfrXParser.T__1)
            self.state = 140
            self.match(lfrXParser.ID)
            self.state = 145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == lfrXParser.T__2:
                self.state = 141
                self.match(lfrXParser.T__2)
                self.state = 142
                self.ioblock()
                self.state = 143
                self.match(lfrXParser.T__3)

            self.state = 147
            self.match(lfrXParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.StatementsContext)
            else:
                return self.getTypedRuleContext(lfrXParser.StatementsContext, i)

        def distributionBlock(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.DistributionBlockContext)
            else:
                return self.getTypedRuleContext(lfrXParser.DistributionBlockContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_body

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBody"):
                listener.enterBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBody"):
                listener.exitBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBody"):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)

    def body(self):

        localctx = lfrXParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_body)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 151
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    lfrXParser.T__6,
                    lfrXParser.T__7,
                    lfrXParser.T__8,
                    lfrXParser.T__20,
                    lfrXParser.T__21,
                    lfrXParser.T__22,
                    lfrXParser.T__23,
                    lfrXParser.T__24,
                    lfrXParser.T__25,
                    lfrXParser.T__31,
                    lfrXParser.T__33,
                    lfrXParser.T__34,
                    lfrXParser.ID,
                ]:
                    self.state = 149
                    self.statements()
                    pass
                elif token in [lfrXParser.T__9]:
                    self.state = 150
                    self.distributionBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 7)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 7))
                            & (
                                (1 << (lfrXParser.T__6 - 7))
                                | (1 << (lfrXParser.T__7 - 7))
                                | (1 << (lfrXParser.T__8 - 7))
                                | (1 << (lfrXParser.T__9 - 7))
                                | (1 << (lfrXParser.T__20 - 7))
                                | (1 << (lfrXParser.T__21 - 7))
                                | (1 << (lfrXParser.T__22 - 7))
                                | (1 << (lfrXParser.T__23 - 7))
                                | (1 << (lfrXParser.T__24 - 7))
                                | (1 << (lfrXParser.T__25 - 7))
                                | (1 << (lfrXParser.T__31 - 7))
                                | (1 << (lfrXParser.T__33 - 7))
                                | (1 << (lfrXParser.T__34 - 7))
                                | (1 << (lfrXParser.ID - 7))
                            )
                        )
                        != 0
                    )
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IoblockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vectorvar(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.VectorvarContext)
            else:
                return self.getTypedRuleContext(lfrXParser.VectorvarContext, i)

        def explicitIOBlock(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.ExplicitIOBlockContext)
            else:
                return self.getTypedRuleContext(lfrXParser.ExplicitIOBlockContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_ioblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIoblock"):
                listener.enterIoblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIoblock"):
                listener.exitIoblock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIoblock"):
                return visitor.visitIoblock(self)
            else:
                return visitor.visitChildren(self)

    def ioblock(self):

        localctx = lfrXParser.IoblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ioblock)
        self._la = 0  # Token type
        try:
            self.state = 171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [lfrXParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 155
                self.vectorvar()
                self.state = 160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == lfrXParser.T__5:
                    self.state = 156
                    self.match(lfrXParser.T__5)
                    self.state = 157
                    self.vectorvar()
                    self.state = 162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [lfrXParser.T__6, lfrXParser.T__7, lfrXParser.T__8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 163
                self.explicitIOBlock()
                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == lfrXParser.T__5:
                    self.state = 164
                    self.match(lfrXParser.T__5)
                    self.state = 165
                    self.explicitIOBlock()
                    self.state = 170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VectorvarContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(lfrXParser.ID, 0)

        def vector(self):
            return self.getTypedRuleContext(lfrXParser.VectorContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_vectorvar

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVectorvar"):
                listener.enterVectorvar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVectorvar"):
                listener.exitVectorvar(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVectorvar"):
                return visitor.visitVectorvar(self)
            else:
                return visitor.visitChildren(self)

    def vectorvar(self):

        localctx = lfrXParser.VectorvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_vectorvar)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(lfrXParser.ID)
            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == lfrXParser.T__27:
                self.state = 174
                self.vector()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitIOBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declvar(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.DeclvarContext)
            else:
                return self.getTypedRuleContext(lfrXParser.DeclvarContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_explicitIOBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExplicitIOBlock"):
                listener.enterExplicitIOBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExplicitIOBlock"):
                listener.exitExplicitIOBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExplicitIOBlock"):
                return visitor.visitExplicitIOBlock(self)
            else:
                return visitor.visitChildren(self)

    def explicitIOBlock(self):

        localctx = lfrXParser.ExplicitIOBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_explicitIOBlock)
        try:
            self.state = 204
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [lfrXParser.T__6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 177
                self.match(lfrXParser.T__6)
                self.state = 178
                self.declvar()
                self.state = 183
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 179
                        self.match(lfrXParser.T__5)
                        self.state = 180
                        self.declvar()
                    self.state = 185
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)

                pass
            elif token in [lfrXParser.T__7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 186
                self.match(lfrXParser.T__7)
                self.state = 187
                self.declvar()
                self.state = 192
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 188
                        self.match(lfrXParser.T__5)
                        self.state = 189
                        self.declvar()
                    self.state = 194
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

                pass
            elif token in [lfrXParser.T__8]:
                self.enterOuterAlt(localctx, 3)
                self.state = 195
                self.match(lfrXParser.T__8)
                self.state = 196
                self.declvar()
                self.state = 201
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 10, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 197
                        self.match(lfrXParser.T__5)
                        self.state = 198
                        self.declvar()
                    self.state = 203
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 10, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclvarContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(lfrXParser.ID, 0)

        def vector(self):
            return self.getTypedRuleContext(lfrXParser.VectorContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_declvar

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclvar"):
                listener.enterDeclvar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclvar"):
                listener.exitDeclvar(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeclvar"):
                return visitor.visitDeclvar(self)
            else:
                return visitor.visitChildren(self)

    def declvar(self):

        localctx = lfrXParser.DeclvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_declvar)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == lfrXParser.T__27:
                self.state = 206
                self.vector()

            self.state = 209
            self.match(lfrXParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DistributionBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sensitivitylist(self):
            return self.getTypedRuleContext(lfrXParser.SensitivitylistContext, 0)

        def distributionBody(self):
            return self.getTypedRuleContext(lfrXParser.DistributionBodyContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_distributionBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDistributionBlock"):
                listener.enterDistributionBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDistributionBlock"):
                listener.exitDistributionBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDistributionBlock"):
                return visitor.visitDistributionBlock(self)
            else:
                return visitor.visitChildren(self)

    def distributionBlock(self):

        localctx = lfrXParser.DistributionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_distributionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(lfrXParser.T__9)
            self.state = 212
            self.match(lfrXParser.T__2)
            self.state = 213
            self.sensitivitylist()
            self.state = 214
            self.match(lfrXParser.T__3)
            self.state = 215
            self.match(lfrXParser.T__10)
            self.state = 216
            self.distributionBody()
            self.state = 217
            self.match(lfrXParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DistributionBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def distributeBodyStat(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.DistributeBodyStatContext)
            else:
                return self.getTypedRuleContext(lfrXParser.DistributeBodyStatContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_distributionBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDistributionBody"):
                listener.enterDistributionBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDistributionBody"):
                listener.exitDistributionBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDistributionBody"):
                return visitor.visitDistributionBody(self)
            else:
                return visitor.visitChildren(self)

    def distributionBody(self):

        localctx = lfrXParser.DistributionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_distributionBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 219
                self.distributeBodyStat()
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 13)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 13))
                            & (
                                (1 << (lfrXParser.T__12 - 13))
                                | (1 << (lfrXParser.T__15 - 13))
                                | (1 << (lfrXParser.T__29 - 13))
                                | (1 << (lfrXParser.ID - 13))
                            )
                        )
                        != 0
                    )
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DistributeBodyStatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def distributionassignstat(self):
            return self.getTypedRuleContext(lfrXParser.DistributionassignstatContext, 0)

        def caseBlock(self):
            return self.getTypedRuleContext(lfrXParser.CaseBlockContext, 0)

        def ifElseBlock(self):
            return self.getTypedRuleContext(lfrXParser.IfElseBlockContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_distributeBodyStat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDistributeBodyStat"):
                listener.enterDistributeBodyStat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDistributeBodyStat"):
                listener.exitDistributeBodyStat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDistributeBodyStat"):
                return visitor.visitDistributeBodyStat(self)
            else:
                return visitor.visitChildren(self)

    def distributeBodyStat(self):

        localctx = lfrXParser.DistributeBodyStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_distributeBodyStat)
        try:
            self.state = 227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [lfrXParser.T__29, lfrXParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 224
                self.distributionassignstat()
                pass
            elif token in [lfrXParser.T__15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 225
                self.caseBlock()
                pass
            elif token in [lfrXParser.T__12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 226
                self.ifElseBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfElseBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifBlock(self):
            return self.getTypedRuleContext(lfrXParser.IfBlockContext, 0)

        def elseIfBlock(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.ElseIfBlockContext)
            else:
                return self.getTypedRuleContext(lfrXParser.ElseIfBlockContext, i)

        def elseBlock(self):
            return self.getTypedRuleContext(lfrXParser.ElseBlockContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_ifElseBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIfElseBlock"):
                listener.enterIfElseBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIfElseBlock"):
                listener.exitIfElseBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIfElseBlock"):
                return visitor.visitIfElseBlock(self)
            else:
                return visitor.visitChildren(self)

    def ifElseBlock(self):

        localctx = lfrXParser.IfElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_ifElseBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.ifBlock()
            self.state = 233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 15, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 230
                    self.elseIfBlock()
                self.state = 235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 15, self._ctx)

            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == lfrXParser.T__13:
                self.state = 236
                self.elseBlock()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def distributeCondition(self):
            return self.getTypedRuleContext(lfrXParser.DistributeConditionContext, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(lfrXParser.StatementBlockContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_ifBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIfBlock"):
                listener.enterIfBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIfBlock"):
                listener.exitIfBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIfBlock"):
                return visitor.visitIfBlock(self)
            else:
                return visitor.visitChildren(self)

    def ifBlock(self):

        localctx = lfrXParser.IfBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_ifBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(lfrXParser.T__12)
            self.state = 240
            self.match(lfrXParser.T__2)
            self.state = 241
            self.distributeCondition()
            self.state = 242
            self.match(lfrXParser.T__3)
            self.state = 243
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementBlock(self):
            return self.getTypedRuleContext(lfrXParser.StatementBlockContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_elseBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElseBlock"):
                listener.enterElseBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElseBlock"):
                listener.exitElseBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElseBlock"):
                return visitor.visitElseBlock(self)
            else:
                return visitor.visitChildren(self)

    def elseBlock(self):

        localctx = lfrXParser.ElseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_elseBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(lfrXParser.T__13)
            self.state = 246
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseIfBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def distributeCondition(self):
            return self.getTypedRuleContext(lfrXParser.DistributeConditionContext, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(lfrXParser.StatementBlockContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_elseIfBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElseIfBlock"):
                listener.enterElseIfBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElseIfBlock"):
                listener.exitElseIfBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElseIfBlock"):
                return visitor.visitElseIfBlock(self)
            else:
                return visitor.visitChildren(self)

    def elseIfBlock(self):

        localctx = lfrXParser.ElseIfBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_elseIfBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(lfrXParser.T__13)
            self.state = 249
            self.match(lfrXParser.T__12)
            self.state = 250
            self.match(lfrXParser.T__2)
            self.state = 251
            self.distributeCondition()
            self.state = 252
            self.match(lfrXParser.T__3)
            self.state = 253
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DistributeConditionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(lfrXParser.LhsContext, 0)

        def binary_module_path_operator(self):
            return self.getTypedRuleContext(
                lfrXParser.Binary_module_path_operatorContext, 0
            )

        def distvalue(self):
            return self.getTypedRuleContext(lfrXParser.DistvalueContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_distributeCondition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDistributeCondition"):
                listener.enterDistributeCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDistributeCondition"):
                listener.exitDistributeCondition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDistributeCondition"):
                return visitor.visitDistributeCondition(self)
            else:
                return visitor.visitChildren(self)

    def distributeCondition(self):

        localctx = lfrXParser.DistributeConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_distributeCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.lhs()
            self.state = 256
            self.binary_module_path_operator()
            self.state = 257
            self.distvalue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def distributionassignstat(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    lfrXParser.DistributionassignstatContext
                )
            else:
                return self.getTypedRuleContext(
                    lfrXParser.DistributionassignstatContext, i
                )

        def getRuleIndex(self):
            return lfrXParser.RULE_statementBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatementBlock"):
                listener.enterStatementBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatementBlock"):
                listener.exitStatementBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatementBlock"):
                return visitor.visitStatementBlock(self)
            else:
                return visitor.visitChildren(self)

    def statementBlock(self):

        localctx = lfrXParser.StatementBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_statementBlock)
        self._la = 0  # Token type
        try:
            self.state = 268
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [lfrXParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.match(lfrXParser.T__10)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 260
                    self.distributionassignstat()
                    self.state = 263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == lfrXParser.T__29 or _la == lfrXParser.ID):
                        break

                self.state = 265
                self.match(lfrXParser.T__11)
                pass
            elif token in [lfrXParser.T__29, lfrXParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 267
                self.distributionassignstat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseBlockHeader(self):
            return self.getTypedRuleContext(lfrXParser.CaseBlockHeaderContext, 0)

        def casestat(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.CasestatContext)
            else:
                return self.getTypedRuleContext(lfrXParser.CasestatContext, i)

        def defaultCaseStat(self):
            return self.getTypedRuleContext(lfrXParser.DefaultCaseStatContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_caseBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCaseBlock"):
                listener.enterCaseBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCaseBlock"):
                listener.exitCaseBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCaseBlock"):
                return visitor.visitCaseBlock(self)
            else:
                return visitor.visitChildren(self)

    def caseBlock(self):

        localctx = lfrXParser.CaseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_caseBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.caseBlockHeader()
            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 271
                self.casestat()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 71)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 71))
                            & (
                                (1 << (lfrXParser.Real_number - 71))
                                | (1 << (lfrXParser.Decimal_number - 71))
                                | (1 << (lfrXParser.Binary_number - 71))
                                | (1 << (lfrXParser.Octal_number - 71))
                                | (1 << (lfrXParser.Hex_number - 71))
                            )
                        )
                        != 0
                    )
                ):
                    break

            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == lfrXParser.T__17:
                self.state = 276
                self.defaultCaseStat()

            self.state = 279
            self.match(lfrXParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseBlockHeaderContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(lfrXParser.LhsContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_caseBlockHeader

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCaseBlockHeader"):
                listener.enterCaseBlockHeader(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCaseBlockHeader"):
                listener.exitCaseBlockHeader(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCaseBlockHeader"):
                return visitor.visitCaseBlockHeader(self)
            else:
                return visitor.visitChildren(self)

    def caseBlockHeader(self):

        localctx = lfrXParser.CaseBlockHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_caseBlockHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(lfrXParser.T__15)
            self.state = 282
            self.match(lfrXParser.T__2)
            self.state = 283
            self.lhs()
            self.state = 284
            self.match(lfrXParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CasestatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def distvalue(self):
            return self.getTypedRuleContext(lfrXParser.DistvalueContext, 0)

        def statementBlock(self):
            return self.getTypedRuleContext(lfrXParser.StatementBlockContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_casestat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCasestat"):
                listener.enterCasestat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCasestat"):
                listener.exitCasestat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCasestat"):
                return visitor.visitCasestat(self)
            else:
                return visitor.visitChildren(self)

    def casestat(self):

        localctx = lfrXParser.CasestatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_casestat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.distvalue()
            self.state = 287
            self.match(lfrXParser.T__16)
            self.state = 288
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultCaseStatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementBlock(self):
            return self.getTypedRuleContext(lfrXParser.StatementBlockContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_defaultCaseStat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDefaultCaseStat"):
                listener.enterDefaultCaseStat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDefaultCaseStat"):
                listener.exitDefaultCaseStat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDefaultCaseStat"):
                return visitor.visitDefaultCaseStat(self)
            else:
                return visitor.visitChildren(self)

    def defaultCaseStat(self):

        localctx = lfrXParser.DefaultCaseStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_defaultCaseStat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(lfrXParser.T__17)
            self.state = 291
            self.match(lfrXParser.T__16)
            self.state = 292
            self.statementBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DistvalueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(lfrXParser.NumberContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_distvalue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDistvalue"):
                listener.enterDistvalue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDistvalue"):
                listener.exitDistvalue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDistvalue"):
                return visitor.visitDistvalue(self)
            else:
                return visitor.visitChildren(self)

    def distvalue(self):

        localctx = lfrXParser.DistvalueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_distvalue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DistributionassignstatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(lfrXParser.LhsContext, 0)

        def number(self):
            return self.getTypedRuleContext(lfrXParser.NumberContext, 0)

        def variables(self):
            return self.getTypedRuleContext(lfrXParser.VariablesContext, 0)

        def expression(self):
            return self.getTypedRuleContext(lfrXParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_distributionassignstat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDistributionassignstat"):
                listener.enterDistributionassignstat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDistributionassignstat"):
                listener.exitDistributionassignstat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDistributionassignstat"):
                return visitor.visitDistributionassignstat(self)
            else:
                return visitor.visitChildren(self)

    def distributionassignstat(self):

        localctx = lfrXParser.DistributionassignstatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_distributionassignstat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.lhs()
            self.state = 297
            self.match(lfrXParser.T__18)
            self.state = 301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
            if la_ == 1:
                self.state = 298
                self.number()
                pass

            elif la_ == 2:
                self.state = 299
                self.variables()
                pass

            elif la_ == 3:
                self.state = 300
                self.expression()
                pass

            self.state = 303
            self.match(lfrXParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SensitivitylistContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signal(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.SignalContext)
            else:
                return self.getTypedRuleContext(lfrXParser.SignalContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_sensitivitylist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSensitivitylist"):
                listener.enterSensitivitylist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSensitivitylist"):
                listener.exitSensitivitylist(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSensitivitylist"):
                return visitor.visitSensitivitylist(self)
            else:
                return visitor.visitChildren(self)

    def sensitivitylist(self):

        localctx = lfrXParser.SensitivitylistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sensitivitylist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.signal()
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == lfrXParser.T__5:
                self.state = 306
                self.match(lfrXParser.T__5)
                self.state = 307
                self.signal()
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(lfrXParser.ID, 0)

        def vector(self):
            return self.getTypedRuleContext(lfrXParser.VectorContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_signal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSignal"):
                listener.enterSignal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSignal"):
                listener.exitSignal(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSignal"):
                return visitor.visitSignal(self)
            else:
                return visitor.visitChildren(self)

    def signal(self):

        localctx = lfrXParser.SignalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_signal)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.match(lfrXParser.ID)
            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == lfrXParser.T__27:
                self.state = 314
                self.vector()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(lfrXParser.StatementContext, 0)

        def technologydirectives(self):
            return self.getTypedRuleContext(lfrXParser.TechnologydirectivesContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_statements

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatements"):
                listener.enterStatements(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatements"):
                listener.exitStatements(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatements"):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)

    def statements(self):

        localctx = lfrXParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_statements)
        try:
            self.state = 321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                lfrXParser.T__6,
                lfrXParser.T__7,
                lfrXParser.T__8,
                lfrXParser.T__20,
                lfrXParser.T__21,
                lfrXParser.T__22,
                lfrXParser.T__23,
                lfrXParser.T__24,
                lfrXParser.T__25,
                lfrXParser.ID,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.statement()
                self.state = 318
                self.match(lfrXParser.T__4)
                pass
            elif token in [lfrXParser.T__31, lfrXParser.T__33, lfrXParser.T__34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.technologydirectives()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioassignstat(self):
            return self.getTypedRuleContext(lfrXParser.IoassignstatContext, 0)

        def assignstat(self):
            return self.getTypedRuleContext(lfrXParser.AssignstatContext, 0)

        def tempvariablesstat(self):
            return self.getTypedRuleContext(lfrXParser.TempvariablesstatContext, 0)

        def literalassignstat(self):
            return self.getTypedRuleContext(lfrXParser.LiteralassignstatContext, 0)

        def moduleinstantiationstat(self):
            return self.getTypedRuleContext(
                lfrXParser.ModuleinstantiationstatContext, 0
            )

        def getRuleIndex(self):
            return lfrXParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatement"):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)

    def statement(self):

        localctx = lfrXParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_statement)
        try:
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 323
                self.ioassignstat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 324
                self.assignstat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 325
                self.tempvariablesstat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 326
                self.literalassignstat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 327
                self.moduleinstantiationstat()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleinstantiationstatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduletype(self):
            return self.getTypedRuleContext(lfrXParser.ModuletypeContext, 0)

        def instancename(self):
            return self.getTypedRuleContext(lfrXParser.InstancenameContext, 0)

        def instanceioblock(self):
            return self.getTypedRuleContext(lfrXParser.InstanceioblockContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_moduleinstantiationstat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModuleinstantiationstat"):
                listener.enterModuleinstantiationstat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModuleinstantiationstat"):
                listener.exitModuleinstantiationstat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModuleinstantiationstat"):
                return visitor.visitModuleinstantiationstat(self)
            else:
                return visitor.visitChildren(self)

    def moduleinstantiationstat(self):

        localctx = lfrXParser.ModuleinstantiationstatContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 54, self.RULE_moduleinstantiationstat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.moduletype()
            self.state = 331
            self.instancename()
            self.state = 332
            self.match(lfrXParser.T__2)
            self.state = 333
            self.instanceioblock()
            self.state = 334
            self.match(lfrXParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InstanceioblockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedioblock(self):
            return self.getTypedRuleContext(lfrXParser.OrderedioblockContext, 0)

        def unorderedioblock(self):
            return self.getTypedRuleContext(lfrXParser.UnorderedioblockContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_instanceioblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInstanceioblock"):
                listener.enterInstanceioblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInstanceioblock"):
                listener.exitInstanceioblock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInstanceioblock"):
                return visitor.visitInstanceioblock(self)
            else:
                return visitor.visitChildren(self)

    def instanceioblock(self):

        localctx = lfrXParser.InstanceioblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_instanceioblock)
        try:
            self.state = 338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [lfrXParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self.orderedioblock()
                pass
            elif token in [lfrXParser.T__19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.unorderedioblock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderedioblockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vectorvar(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.VectorvarContext)
            else:
                return self.getTypedRuleContext(lfrXParser.VectorvarContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_orderedioblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderedioblock"):
                listener.enterOrderedioblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderedioblock"):
                listener.exitOrderedioblock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderedioblock"):
                return visitor.visitOrderedioblock(self)
            else:
                return visitor.visitChildren(self)

    def orderedioblock(self):

        localctx = lfrXParser.OrderedioblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_orderedioblock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.vectorvar()
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == lfrXParser.T__5:
                self.state = 341
                self.match(lfrXParser.T__5)
                self.state = 342
                self.vectorvar()
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnorderedioblockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicitinstanceiomapping(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    lfrXParser.ExplicitinstanceiomappingContext
                )
            else:
                return self.getTypedRuleContext(
                    lfrXParser.ExplicitinstanceiomappingContext, i
                )

        def getRuleIndex(self):
            return lfrXParser.RULE_unorderedioblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnorderedioblock"):
                listener.enterUnorderedioblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnorderedioblock"):
                listener.exitUnorderedioblock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnorderedioblock"):
                return visitor.visitUnorderedioblock(self)
            else:
                return visitor.visitChildren(self)

    def unorderedioblock(self):

        localctx = lfrXParser.UnorderedioblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_unorderedioblock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.explicitinstanceiomapping()
            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == lfrXParser.T__5:
                self.state = 349
                self.match(lfrXParser.T__5)
                self.state = 350
                self.explicitinstanceiomapping()
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitinstanceiomappingContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(lfrXParser.ID, 0)

        def variables(self):
            return self.getTypedRuleContext(lfrXParser.VariablesContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_explicitinstanceiomapping

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExplicitinstanceiomapping"):
                listener.enterExplicitinstanceiomapping(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExplicitinstanceiomapping"):
                listener.exitExplicitinstanceiomapping(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExplicitinstanceiomapping"):
                return visitor.visitExplicitinstanceiomapping(self)
            else:
                return visitor.visitChildren(self)

    def explicitinstanceiomapping(self):

        localctx = lfrXParser.ExplicitinstanceiomappingContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 62, self.RULE_explicitinstanceiomapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(lfrXParser.T__19)
            self.state = 357
            self.match(lfrXParser.ID)
            self.state = 358
            self.match(lfrXParser.T__2)
            self.state = 359
            self.variables()
            self.state = 360
            self.match(lfrXParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InstancenameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(lfrXParser.ID, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_instancename

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInstancename"):
                listener.enterInstancename(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInstancename"):
                listener.exitInstancename(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInstancename"):
                return visitor.visitInstancename(self)
            else:
                return visitor.visitChildren(self)

    def instancename(self):

        localctx = lfrXParser.InstancenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_instancename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(lfrXParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuletypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(lfrXParser.ID, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_moduletype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModuletype"):
                listener.enterModuletype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModuletype"):
                listener.exitModuletype(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModuletype"):
                return visitor.visitModuletype(self)
            else:
                return visitor.visitChildren(self)

    def moduletype(self):

        localctx = lfrXParser.ModuletypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_moduletype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(lfrXParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TempvariablesstatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fluiddeclstat(self):
            return self.getTypedRuleContext(lfrXParser.FluiddeclstatContext, 0)

        def storagestat(self):
            return self.getTypedRuleContext(lfrXParser.StoragestatContext, 0)

        def numvarstat(self):
            return self.getTypedRuleContext(lfrXParser.NumvarstatContext, 0)

        def signalvarstat(self):
            return self.getTypedRuleContext(lfrXParser.SignalvarstatContext, 0)

        def pumpvarstat(self):
            return self.getTypedRuleContext(lfrXParser.PumpvarstatContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_tempvariablesstat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTempvariablesstat"):
                listener.enterTempvariablesstat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTempvariablesstat"):
                listener.exitTempvariablesstat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTempvariablesstat"):
                return visitor.visitTempvariablesstat(self)
            else:
                return visitor.visitChildren(self)

    def tempvariablesstat(self):

        localctx = lfrXParser.TempvariablesstatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_tempvariablesstat)
        try:
            self.state = 371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [lfrXParser.T__21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 366
                self.fluiddeclstat()
                pass
            elif token in [lfrXParser.T__22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 367
                self.storagestat()
                pass
            elif token in [lfrXParser.T__24]:
                self.enterOuterAlt(localctx, 3)
                self.state = 368
                self.numvarstat()
                pass
            elif token in [lfrXParser.T__20]:
                self.enterOuterAlt(localctx, 4)
                self.state = 369
                self.signalvarstat()
                pass
            elif token in [lfrXParser.T__23]:
                self.enterOuterAlt(localctx, 5)
                self.state = 370
                self.pumpvarstat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignalvarstatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declvar(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.DeclvarContext)
            else:
                return self.getTypedRuleContext(lfrXParser.DeclvarContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_signalvarstat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSignalvarstat"):
                listener.enterSignalvarstat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSignalvarstat"):
                listener.exitSignalvarstat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSignalvarstat"):
                return visitor.visitSignalvarstat(self)
            else:
                return visitor.visitChildren(self)

    def signalvarstat(self):

        localctx = lfrXParser.SignalvarstatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_signalvarstat)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(lfrXParser.T__20)
            self.state = 374
            self.declvar()
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == lfrXParser.T__5:
                self.state = 375
                self.match(lfrXParser.T__5)
                self.state = 376
                self.declvar()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FluiddeclstatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declvar(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.DeclvarContext)
            else:
                return self.getTypedRuleContext(lfrXParser.DeclvarContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_fluiddeclstat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFluiddeclstat"):
                listener.enterFluiddeclstat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFluiddeclstat"):
                listener.exitFluiddeclstat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFluiddeclstat"):
                return visitor.visitFluiddeclstat(self)
            else:
                return visitor.visitChildren(self)

    def fluiddeclstat(self):

        localctx = lfrXParser.FluiddeclstatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_fluiddeclstat)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(lfrXParser.T__21)
            self.state = 383
            self.declvar()
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == lfrXParser.T__5:
                self.state = 384
                self.match(lfrXParser.T__5)
                self.state = 385
                self.declvar()
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StoragestatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declvar(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.DeclvarContext)
            else:
                return self.getTypedRuleContext(lfrXParser.DeclvarContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_storagestat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStoragestat"):
                listener.enterStoragestat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStoragestat"):
                listener.exitStoragestat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStoragestat"):
                return visitor.visitStoragestat(self)
            else:
                return visitor.visitChildren(self)

    def storagestat(self):

        localctx = lfrXParser.StoragestatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_storagestat)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(lfrXParser.T__22)
            self.state = 392
            self.declvar()
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == lfrXParser.T__5:
                self.state = 393
                self.match(lfrXParser.T__5)
                self.state = 394
                self.declvar()
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PumpvarstatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declvar(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.DeclvarContext)
            else:
                return self.getTypedRuleContext(lfrXParser.DeclvarContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_pumpvarstat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPumpvarstat"):
                listener.enterPumpvarstat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPumpvarstat"):
                listener.exitPumpvarstat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPumpvarstat"):
                return visitor.visitPumpvarstat(self)
            else:
                return visitor.visitChildren(self)

    def pumpvarstat(self):

        localctx = lfrXParser.PumpvarstatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pumpvarstat)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(lfrXParser.T__23)
            self.state = 401
            self.declvar()
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == lfrXParser.T__5:
                self.state = 402
                self.match(lfrXParser.T__5)
                self.state = 403
                self.declvar()
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumvarstatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalassignstat(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.LiteralassignstatContext)
            else:
                return self.getTypedRuleContext(lfrXParser.LiteralassignstatContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_numvarstat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumvarstat"):
                listener.enterNumvarstat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumvarstat"):
                listener.exitNumvarstat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumvarstat"):
                return visitor.visitNumvarstat(self)
            else:
                return visitor.visitChildren(self)

    def numvarstat(self):

        localctx = lfrXParser.NumvarstatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_numvarstat)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(lfrXParser.T__24)
            self.state = 410
            self.literalassignstat()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == lfrXParser.T__5:
                self.state = 411
                self.match(lfrXParser.T__5)
                self.state = 412
                self.literalassignstat()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignstatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(lfrXParser.LhsContext, 0)

        def bracketexpression(self):
            return self.getTypedRuleContext(lfrXParser.BracketexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(lfrXParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_assignstat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignstat"):
                listener.enterAssignstat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignstat"):
                listener.exitAssignstat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignstat"):
                return visitor.visitAssignstat(self)
            else:
                return visitor.visitChildren(self)

    def assignstat(self):

        localctx = lfrXParser.AssignstatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_assignstat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(lfrXParser.T__25)
            self.state = 419
            self.lhs()
            self.state = 420
            self.match(lfrXParser.T__26)
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 35, self._ctx)
            if la_ == 1:
                self.state = 421
                self.bracketexpression()
                pass

            elif la_ == 2:
                self.state = 422
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralassignstatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(lfrXParser.ID, 0)

        def bracketexpression(self):
            return self.getTypedRuleContext(lfrXParser.BracketexpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(lfrXParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_literalassignstat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteralassignstat"):
                listener.enterLiteralassignstat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteralassignstat"):
                listener.exitLiteralassignstat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteralassignstat"):
                return visitor.visitLiteralassignstat(self)
            else:
                return visitor.visitChildren(self)

    def literalassignstat(self):

        localctx = lfrXParser.LiteralassignstatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_literalassignstat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(lfrXParser.ID)
            self.state = 426
            self.match(lfrXParser.T__26)
            self.state = 429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 36, self._ctx)
            if la_ == 1:
                self.state = 427
                self.bracketexpression()
                pass

            elif la_ == 2:
                self.state = 428
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BracketexpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(lfrXParser.ExpressionContext, 0)

        def unary_operator(self):
            return self.getTypedRuleContext(lfrXParser.Unary_operatorContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_bracketexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBracketexpression"):
                listener.enterBracketexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBracketexpression"):
                listener.exitBracketexpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBracketexpression"):
                return visitor.visitBracketexpression(self)
            else:
                return visitor.visitChildren(self)

    def bracketexpression(self):

        localctx = lfrXParser.BracketexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_bracketexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and (
                (1 << _la)
                & (
                    (1 << lfrXParser.T__40)
                    | (1 << lfrXParser.T__41)
                    | (1 << lfrXParser.T__42)
                    | (1 << lfrXParser.T__43)
                    | (1 << lfrXParser.T__44)
                    | (1 << lfrXParser.T__45)
                    | (1 << lfrXParser.T__46)
                    | (1 << lfrXParser.T__47)
                    | (1 << lfrXParser.T__48)
                    | (1 << lfrXParser.T__49)
                    | (1 << lfrXParser.T__50)
                )
            ) != 0:
                self.state = 431
                self.unary_operator()

            self.state = 434
            self.match(lfrXParser.T__2)
            self.state = 435
            self.expression()
            self.state = 436
            self.match(lfrXParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bracketexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.BracketexpressionContext)
            else:
                return self.getTypedRuleContext(lfrXParser.BracketexpressionContext, i)

        def expressionterm(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.ExpressiontermContext)
            else:
                return self.getTypedRuleContext(lfrXParser.ExpressiontermContext, i)

        def binary_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.Binary_operatorContext)
            else:
                return self.getTypedRuleContext(lfrXParser.Binary_operatorContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpression"):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)

    def expression(self):

        localctx = lfrXParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 38, self._ctx)
            if la_ == 1:
                self.state = 438
                self.bracketexpression()
                pass

            elif la_ == 2:
                self.state = 439
                self.expressionterm()
                pass

            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 19)) & ~0x3F) == 0 and (
                (1 << (_la - 19))
                & (
                    (1 << (lfrXParser.T__18 - 19))
                    | (1 << (lfrXParser.T__37 - 19))
                    | (1 << (lfrXParser.T__38 - 19))
                    | (1 << (lfrXParser.T__39 - 19))
                    | (1 << (lfrXParser.T__40 - 19))
                    | (1 << (lfrXParser.T__41 - 19))
                    | (1 << (lfrXParser.T__44 - 19))
                    | (1 << (lfrXParser.T__46 - 19))
                    | (1 << (lfrXParser.T__48 - 19))
                    | (1 << (lfrXParser.T__49 - 19))
                    | (1 << (lfrXParser.T__50 - 19))
                    | (1 << (lfrXParser.T__51 - 19))
                    | (1 << (lfrXParser.T__52 - 19))
                    | (1 << (lfrXParser.T__53 - 19))
                    | (1 << (lfrXParser.T__54 - 19))
                    | (1 << (lfrXParser.T__55 - 19))
                    | (1 << (lfrXParser.T__56 - 19))
                    | (1 << (lfrXParser.T__57 - 19))
                    | (1 << (lfrXParser.T__58 - 19))
                    | (1 << (lfrXParser.T__59 - 19))
                    | (1 << (lfrXParser.T__60 - 19))
                    | (1 << (lfrXParser.T__61 - 19))
                    | (1 << (lfrXParser.T__62 - 19))
                    | (1 << (lfrXParser.T__63 - 19))
                    | (1 << (lfrXParser.T__64 - 19))
                )
            ) != 0:
                self.state = 442
                self.binary_operator()
                self.state = 445
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 39, self._ctx)
                if la_ == 1:
                    self.state = 443
                    self.bracketexpression()
                    pass

                elif la_ == 2:
                    self.state = 444
                    self.expressionterm()
                    pass

                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressiontermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables(self):
            return self.getTypedRuleContext(lfrXParser.VariablesContext, 0)

        def unary_operator(self):
            return self.getTypedRuleContext(lfrXParser.Unary_operatorContext, 0)

        def number(self):
            return self.getTypedRuleContext(lfrXParser.NumberContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_expressionterm

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionterm"):
                listener.enterExpressionterm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionterm"):
                listener.exitExpressionterm(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionterm"):
                return visitor.visitExpressionterm(self)
            else:
                return visitor.visitChildren(self)

    def expressionterm(self):

        localctx = lfrXParser.ExpressiontermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_expressionterm)
        self._la = 0  # Token type
        try:
            self.state = 457
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                lfrXParser.T__29,
                lfrXParser.T__40,
                lfrXParser.T__41,
                lfrXParser.T__42,
                lfrXParser.T__43,
                lfrXParser.T__44,
                lfrXParser.T__45,
                lfrXParser.T__46,
                lfrXParser.T__47,
                lfrXParser.T__48,
                lfrXParser.T__49,
                lfrXParser.T__50,
                lfrXParser.ID,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3F) == 0 and (
                    (1 << _la)
                    & (
                        (1 << lfrXParser.T__40)
                        | (1 << lfrXParser.T__41)
                        | (1 << lfrXParser.T__42)
                        | (1 << lfrXParser.T__43)
                        | (1 << lfrXParser.T__44)
                        | (1 << lfrXParser.T__45)
                        | (1 << lfrXParser.T__46)
                        | (1 << lfrXParser.T__47)
                        | (1 << lfrXParser.T__48)
                        | (1 << lfrXParser.T__49)
                        | (1 << lfrXParser.T__50)
                    )
                ) != 0:
                    self.state = 452
                    self.unary_operator()

                self.state = 455
                self.variables()
                pass
            elif token in [
                lfrXParser.Real_number,
                lfrXParser.Decimal_number,
                lfrXParser.Binary_number,
                lfrXParser.Octal_number,
                lfrXParser.Hex_number,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 456
                self.number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logiccondition_operandContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bracketexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.BracketexpressionContext)
            else:
                return self.getTypedRuleContext(lfrXParser.BracketexpressionContext, i)

        def expressionterm(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.ExpressiontermContext)
            else:
                return self.getTypedRuleContext(lfrXParser.ExpressiontermContext, i)

        def binary_operator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.Binary_operatorContext)
            else:
                return self.getTypedRuleContext(lfrXParser.Binary_operatorContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_logiccondition_operand

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogiccondition_operand"):
                listener.enterLogiccondition_operand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogiccondition_operand"):
                listener.exitLogiccondition_operand(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLogiccondition_operand"):
                return visitor.visitLogiccondition_operand(self)
            else:
                return visitor.visitChildren(self)

    def logiccondition_operand(self):

        localctx = lfrXParser.Logiccondition_operandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_logiccondition_operand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
            if la_ == 1:
                self.state = 459
                self.bracketexpression()
                pass

            elif la_ == 2:
                self.state = 460
                self.expressionterm()
                pass

            self.state = 470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 45, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 463
                    self.binary_operator()
                    self.state = 466
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 44, self._ctx)
                    if la_ == 1:
                        self.state = 464
                        self.bracketexpression()
                        pass

                    elif la_ == 2:
                        self.state = 465
                        self.expressionterm()
                        pass

                self.state = 472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 45, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicconditionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logiccondition_operand(self):
            return self.getTypedRuleContext(lfrXParser.Logiccondition_operandContext, 0)

        def binary_module_path_operator(self):
            return self.getTypedRuleContext(
                lfrXParser.Binary_module_path_operatorContext, 0
            )

        def logic_value(self):
            return self.getTypedRuleContext(lfrXParser.Logic_valueContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_logiccondition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogiccondition"):
                listener.enterLogiccondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogiccondition"):
                listener.exitLogiccondition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLogiccondition"):
                return visitor.visitLogiccondition(self)
            else:
                return visitor.visitChildren(self)

    def logiccondition(self):

        localctx = lfrXParser.LogicconditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_logiccondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.logiccondition_operand()
            self.state = 474
            self.binary_module_path_operator()
            self.state = 475
            self.logic_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logic_valueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(lfrXParser.NumberContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_logic_value

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogic_value"):
                listener.enterLogic_value(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogic_value"):
                listener.exitLogic_value(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLogic_value"):
                return visitor.visitLogic_value(self)
            else:
                return visitor.visitChildren(self)

    def logic_value(self):

        localctx = lfrXParser.Logic_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_logic_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VectorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.start = None  # Token
            self.end = None  # Token

        def Decimal_number(self, i: int = None):
            if i is None:
                return self.getTokens(lfrXParser.Decimal_number)
            else:
                return self.getToken(lfrXParser.Decimal_number, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_vector

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVector"):
                listener.enterVector(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVector"):
                listener.exitVector(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVector"):
                return visitor.visitVector(self)
            else:
                return visitor.visitChildren(self)

    def vector(self):

        localctx = lfrXParser.VectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_vector)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(lfrXParser.T__27)
            self.state = 480
            localctx.start = self.match(lfrXParser.Decimal_number)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == lfrXParser.T__16:
                self.state = 481
                self.match(lfrXParser.T__16)
                self.state = 482
                localctx.end = self.match(lfrXParser.Decimal_number)

            self.state = 485
            self.match(lfrXParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariablesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vectorvar(self):
            return self.getTypedRuleContext(lfrXParser.VectorvarContext, 0)

        def concatenation(self):
            return self.getTypedRuleContext(lfrXParser.ConcatenationContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_variables

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariables"):
                listener.enterVariables(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariables"):
                listener.exitVariables(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariables"):
                return visitor.visitVariables(self)
            else:
                return visitor.visitChildren(self)

    def variables(self):

        localctx = lfrXParser.VariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_variables)
        try:
            self.state = 489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [lfrXParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.vectorvar()
                pass
            elif token in [lfrXParser.T__29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.concatenation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConcatenationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vectorvar(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.VectorvarContext)
            else:
                return self.getTypedRuleContext(lfrXParser.VectorvarContext, i)

        def vector(self):
            return self.getTypedRuleContext(lfrXParser.VectorContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_concatenation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConcatenation"):
                listener.enterConcatenation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConcatenation"):
                listener.exitConcatenation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConcatenation"):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)

    def concatenation(self):

        localctx = lfrXParser.ConcatenationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_concatenation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(lfrXParser.T__29)
            self.state = 492
            self.vectorvar()
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == lfrXParser.T__5:
                self.state = 493
                self.match(lfrXParser.T__5)
                self.state = 494
                self.vectorvar()
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 500
            self.match(lfrXParser.T__30)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == lfrXParser.T__27:
                self.state = 501
                self.vector()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LhsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables(self):
            return self.getTypedRuleContext(lfrXParser.VariablesContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_lhs

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLhs"):
                listener.enterLhs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLhs"):
                listener.exitLhs(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLhs"):
                return visitor.visitLhs(self)
            else:
                return visitor.visitChildren(self)

    def lhs(self):

        localctx = lfrXParser.LhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_lhs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.variables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IoassignstatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicitIOBlock(self):
            return self.getTypedRuleContext(lfrXParser.ExplicitIOBlockContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_ioassignstat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIoassignstat"):
                listener.enterIoassignstat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIoassignstat"):
                listener.exitIoassignstat(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIoassignstat"):
                return visitor.visitIoassignstat(self)
            else:
                return visitor.visitChildren(self)

    def ioassignstat(self):

        localctx = lfrXParser.IoassignstatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ioassignstat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.explicitIOBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TechnologydirectivesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def performancedirective(self):
            return self.getTypedRuleContext(lfrXParser.PerformancedirectiveContext, 0)

        def technologymappingdirective(self):
            return self.getTypedRuleContext(
                lfrXParser.TechnologymappingdirectiveContext, 0
            )

        def materialmappingdirective(self):
            return self.getTypedRuleContext(
                lfrXParser.MaterialmappingdirectiveContext, 0
            )

        def getRuleIndex(self):
            return lfrXParser.RULE_technologydirectives

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTechnologydirectives"):
                listener.enterTechnologydirectives(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTechnologydirectives"):
                listener.exitTechnologydirectives(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTechnologydirectives"):
                return visitor.visitTechnologydirectives(self)
            else:
                return visitor.visitChildren(self)

    def technologydirectives(self):

        localctx = lfrXParser.TechnologydirectivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_technologydirectives)
        try:
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [lfrXParser.T__34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.performancedirective()
                pass
            elif token in [lfrXParser.T__31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.technologymappingdirective()
                pass
            elif token in [lfrXParser.T__33]:
                self.enterOuterAlt(localctx, 3)
                self.state = 510
                self.materialmappingdirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TechnologymappingdirectiveContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assignmode = None  # Token

        def mappingoperator(self):
            return self.getTypedRuleContext(lfrXParser.MappingoperatorContext, 0)

        def ID(self, i: int = None):
            if i is None:
                return self.getTokens(lfrXParser.ID)
            else:
                return self.getToken(lfrXParser.ID, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_technologymappingdirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTechnologymappingdirective"):
                listener.enterTechnologymappingdirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTechnologymappingdirective"):
                listener.exitTechnologymappingdirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTechnologymappingdirective"):
                return visitor.visitTechnologymappingdirective(self)
            else:
                return visitor.visitChildren(self)

    def technologymappingdirective(self):

        localctx = lfrXParser.TechnologymappingdirectiveContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 108, self.RULE_technologymappingdirective)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(lfrXParser.T__31)
            self.state = 514
            self.match(lfrXParser.T__32)
            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 515
                self.match(lfrXParser.ID)
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == lfrXParser.ID):
                    break

            self.state = 520
            self.match(lfrXParser.T__32)
            self.state = 521
            self.match(lfrXParser.T__32)
            self.state = 524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                lfrXParser.T__18,
                lfrXParser.T__37,
                lfrXParser.T__38,
                lfrXParser.T__39,
                lfrXParser.T__40,
                lfrXParser.T__41,
                lfrXParser.T__42,
                lfrXParser.T__43,
                lfrXParser.T__44,
                lfrXParser.T__45,
                lfrXParser.T__46,
                lfrXParser.T__47,
                lfrXParser.T__48,
                lfrXParser.T__49,
                lfrXParser.T__50,
                lfrXParser.T__51,
                lfrXParser.T__52,
                lfrXParser.T__53,
                lfrXParser.T__54,
                lfrXParser.T__55,
                lfrXParser.T__56,
                lfrXParser.T__57,
                lfrXParser.T__58,
                lfrXParser.T__59,
                lfrXParser.T__60,
                lfrXParser.T__61,
                lfrXParser.T__62,
                lfrXParser.T__63,
                lfrXParser.T__64,
            ]:
                self.state = 522
                self.mappingoperator()
                pass
            elif token in [lfrXParser.T__22, lfrXParser.T__23, lfrXParser.T__25]:
                self.state = 523
                localctx.assignmode = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << lfrXParser.T__22)
                                | (1 << lfrXParser.T__23)
                                | (1 << lfrXParser.T__25)
                            )
                        )
                        != 0
                    )
                ):
                    localctx.assignmode = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 526
            self.match(lfrXParser.T__32)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MaterialmappingdirectiveContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.materialtype = None  # Token

        def ID(self, i: int = None):
            if i is None:
                return self.getTokens(lfrXParser.ID)
            else:
                return self.getToken(lfrXParser.ID, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_materialmappingdirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMaterialmappingdirective"):
                listener.enterMaterialmappingdirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMaterialmappingdirective"):
                listener.exitMaterialmappingdirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMaterialmappingdirective"):
                return visitor.visitMaterialmappingdirective(self)
            else:
                return visitor.visitChildren(self)

    def materialmappingdirective(self):

        localctx = lfrXParser.MaterialmappingdirectiveContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 110, self.RULE_materialmappingdirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(lfrXParser.T__33)
            self.state = 529
            self.match(lfrXParser.ID)
            self.state = 530
            localctx.materialtype = self.match(lfrXParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MappingoperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_operator(self):
            return self.getTypedRuleContext(lfrXParser.Binary_operatorContext, 0)

        def unary_operator(self):
            return self.getTypedRuleContext(lfrXParser.Unary_operatorContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_mappingoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMappingoperator"):
                listener.enterMappingoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMappingoperator"):
                listener.exitMappingoperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMappingoperator"):
                return visitor.visitMappingoperator(self)
            else:
                return visitor.visitChildren(self)

    def mappingoperator(self):

        localctx = lfrXParser.MappingoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_mappingoperator)
        try:
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 532
                self.binary_operator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.unary_operator()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformancedirectiveContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mappingoperator(self):
            return self.getTypedRuleContext(lfrXParser.MappingoperatorContext, 0)

        def constraint(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(lfrXParser.ConstraintContext)
            else:
                return self.getTypedRuleContext(lfrXParser.ConstraintContext, i)

        def getRuleIndex(self):
            return lfrXParser.RULE_performancedirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPerformancedirective"):
                listener.enterPerformancedirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPerformancedirective"):
                listener.exitPerformancedirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPerformancedirective"):
                return visitor.visitPerformancedirective(self)
            else:
                return visitor.visitChildren(self)

    def performancedirective(self):

        localctx = lfrXParser.PerformancedirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_performancedirective)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(lfrXParser.T__34)
            self.state = 537
            self.match(lfrXParser.T__32)
            self.state = 538
            self.mappingoperator()
            self.state = 539
            self.match(lfrXParser.T__32)
            self.state = 540
            self.constraint()
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == lfrXParser.T__35 or _la == lfrXParser.T__36:
                self.state = 541
                _la = self._input.LA(1)
                if not (_la == lfrXParser.T__35 or _la == lfrXParser.T__36):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 542
                self.constraint()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.operator = None  # Token

        def ID(self):
            return self.getToken(lfrXParser.ID, 0)

        def number(self):
            return self.getTypedRuleContext(lfrXParser.NumberContext, 0)

        def unit(self):
            return self.getTypedRuleContext(lfrXParser.UnitContext, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_constraint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstraint"):
                listener.enterConstraint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstraint"):
                listener.exitConstraint(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstraint"):
                return visitor.visitConstraint(self)
            else:
                return visitor.visitChildren(self)

    def constraint(self):

        localctx = lfrXParser.ConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_constraint)
        try:
            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 60, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 548
                self.match(lfrXParser.ID)
                self.state = 549
                localctx.operator = self.match(lfrXParser.T__26)
                self.state = 550
                self.number()
                self.state = 552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 55, self._ctx)
                if la_ == 1:
                    self.state = 551
                    self.unit()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 554
                self.match(lfrXParser.ID)
                self.state = 555
                localctx.operator = self.match(lfrXParser.T__37)
                self.state = 556
                self.number()
                self.state = 558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
                if la_ == 1:
                    self.state = 557
                    self.unit()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 560
                self.match(lfrXParser.ID)
                self.state = 561
                localctx.operator = self.match(lfrXParser.T__38)
                self.state = 562
                self.number()
                self.state = 564
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 57, self._ctx)
                if la_ == 1:
                    self.state = 563
                    self.unit()

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 566
                self.match(lfrXParser.ID)
                self.state = 567
                localctx.operator = self.match(lfrXParser.T__39)
                self.state = 568
                self.number()
                self.state = 570
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
                if la_ == 1:
                    self.state = 569
                    self.unit()

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 572
                self.match(lfrXParser.ID)
                self.state = 573
                localctx.operator = self.match(lfrXParser.T__18)
                self.state = 574
                self.number()
                self.state = 576
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
                if la_ == 1:
                    self.state = 575
                    self.unit()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnitContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(lfrXParser.ID, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_unit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnit"):
                listener.enterUnit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnit"):
                listener.exitUnit(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnit"):
                return visitor.visitUnit(self)
            else:
                return visitor.visitChildren(self)

    def unit(self):

        localctx = lfrXParser.UnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_unit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(lfrXParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return lfrXParser.RULE_unary_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnary_operator"):
                listener.enterUnary_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnary_operator"):
                listener.exitUnary_operator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnary_operator"):
                return visitor.visitUnary_operator(self)
            else:
                return visitor.visitChildren(self)

    def unary_operator(self):

        localctx = lfrXParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_unary_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << lfrXParser.T__40)
                            | (1 << lfrXParser.T__41)
                            | (1 << lfrXParser.T__42)
                            | (1 << lfrXParser.T__43)
                            | (1 << lfrXParser.T__44)
                            | (1 << lfrXParser.T__45)
                            | (1 << lfrXParser.T__46)
                            | (1 << lfrXParser.T__47)
                            | (1 << lfrXParser.T__48)
                            | (1 << lfrXParser.T__49)
                            | (1 << lfrXParser.T__50)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Binary_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return lfrXParser.RULE_binary_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBinary_operator"):
                listener.enterBinary_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBinary_operator"):
                listener.exitBinary_operator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBinary_operator"):
                return visitor.visitBinary_operator(self)
            else:
                return visitor.visitChildren(self)

    def binary_operator(self):

        localctx = lfrXParser.Binary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_binary_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 19)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 19))
                        & (
                            (1 << (lfrXParser.T__18 - 19))
                            | (1 << (lfrXParser.T__37 - 19))
                            | (1 << (lfrXParser.T__38 - 19))
                            | (1 << (lfrXParser.T__39 - 19))
                            | (1 << (lfrXParser.T__40 - 19))
                            | (1 << (lfrXParser.T__41 - 19))
                            | (1 << (lfrXParser.T__44 - 19))
                            | (1 << (lfrXParser.T__46 - 19))
                            | (1 << (lfrXParser.T__48 - 19))
                            | (1 << (lfrXParser.T__49 - 19))
                            | (1 << (lfrXParser.T__50 - 19))
                            | (1 << (lfrXParser.T__51 - 19))
                            | (1 << (lfrXParser.T__52 - 19))
                            | (1 << (lfrXParser.T__53 - 19))
                            | (1 << (lfrXParser.T__54 - 19))
                            | (1 << (lfrXParser.T__55 - 19))
                            | (1 << (lfrXParser.T__56 - 19))
                            | (1 << (lfrXParser.T__57 - 19))
                            | (1 << (lfrXParser.T__58 - 19))
                            | (1 << (lfrXParser.T__59 - 19))
                            | (1 << (lfrXParser.T__60 - 19))
                            | (1 << (lfrXParser.T__61 - 19))
                            | (1 << (lfrXParser.T__62 - 19))
                            | (1 << (lfrXParser.T__63 - 19))
                            | (1 << (lfrXParser.T__64 - 19))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_module_path_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return lfrXParser.RULE_unary_module_path_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnary_module_path_operator"):
                listener.enterUnary_module_path_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnary_module_path_operator"):
                listener.exitUnary_module_path_operator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnary_module_path_operator"):
                return visitor.visitUnary_module_path_operator(self)
            else:
                return visitor.visitChildren(self)

    def unary_module_path_operator(self):

        localctx = lfrXParser.Unary_module_path_operatorContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 124, self.RULE_unary_module_path_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << lfrXParser.T__42)
                            | (1 << lfrXParser.T__43)
                            | (1 << lfrXParser.T__44)
                            | (1 << lfrXParser.T__45)
                            | (1 << lfrXParser.T__46)
                            | (1 << lfrXParser.T__47)
                            | (1 << lfrXParser.T__48)
                            | (1 << lfrXParser.T__49)
                            | (1 << lfrXParser.T__50)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Binary_module_path_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return lfrXParser.RULE_binary_module_path_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBinary_module_path_operator"):
                listener.enterBinary_module_path_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBinary_module_path_operator"):
                listener.exitBinary_module_path_operator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBinary_module_path_operator"):
                return visitor.visitBinary_module_path_operator(self)
            else:
                return visitor.visitChildren(self)

    def binary_module_path_operator(self):

        localctx = lfrXParser.Binary_module_path_operatorContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 126, self.RULE_binary_module_path_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << lfrXParser.T__44)
                            | (1 << lfrXParser.T__46)
                            | (1 << lfrXParser.T__48)
                            | (1 << lfrXParser.T__49)
                            | (1 << lfrXParser.T__50)
                            | (1 << lfrXParser.T__54)
                            | (1 << lfrXParser.T__55)
                            | (1 << lfrXParser.T__58)
                            | (1 << lfrXParser.T__59)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal_number(self):
            return self.getToken(lfrXParser.Decimal_number, 0)

        def Octal_number(self):
            return self.getToken(lfrXParser.Octal_number, 0)

        def Binary_number(self):
            return self.getToken(lfrXParser.Binary_number, 0)

        def Hex_number(self):
            return self.getToken(lfrXParser.Hex_number, 0)

        def Real_number(self):
            return self.getToken(lfrXParser.Real_number, 0)

        def getRuleIndex(self):
            return lfrXParser.RULE_number

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumber"):
                listener.enterNumber(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumber"):
                listener.exitNumber(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumber"):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)

    def number(self):

        localctx = lfrXParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_number)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 71)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 71))
                        & (
                            (1 << (lfrXParser.Real_number - 71))
                            | (1 << (lfrXParser.Decimal_number - 71))
                            | (1 << (lfrXParser.Binary_number - 71))
                            | (1 << (lfrXParser.Octal_number - 71))
                            | (1 << (lfrXParser.Hex_number - 71))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx
